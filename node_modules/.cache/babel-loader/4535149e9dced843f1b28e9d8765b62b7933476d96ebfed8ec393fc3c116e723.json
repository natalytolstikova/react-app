{"ast":null,"code":"// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict';\n\nconst {\n  kConstruct\n} = require('../../core/symbols');\nconst {\n  kEnumerableProperty\n} = require('../../core/util');\nconst {\n  iteratorMixin,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util');\nconst {\n  webidl\n} = require('./webidl');\nconst assert = require('node:assert');\nconst util = require('node:util');\nconst kHeadersMap = Symbol('headers map');\nconst kHeadersSortedMap = Symbol('headers map sorted');\n\n/**\n * @param {number} code\n */\nfunction isHTTPWhiteSpaceCharCode(code) {\n  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize(potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  let i = 0;\n  let j = potentialValue.length;\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;\n  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);\n}\nfunction fill(headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; ++i) {\n      const header = object[i];\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        });\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      appendHeader(headers, header[0], header[1]);\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    const keys = Object.keys(object);\n    for (let i = 0; i < keys.length; ++i) {\n      appendHeader(headers, keys[i], object[keys[i]]);\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    });\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */\nfunction appendHeader(headers, name, value) {\n  // 1. Normalize value.\n  value = headerValueNormalize(value);\n\n  // 2. If name is not a header name or value is not a\n  //    header value, then throw a TypeError.\n  if (!isValidHeaderName(name)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value: name,\n      type: 'header name'\n    });\n  } else if (!isValidHeaderValue(value)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value,\n      type: 'header value'\n    });\n  }\n\n  // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n  // 4. Otherwise, if headers’s guard is \"request\" and name is a\n  //    forbidden header name, return.\n  // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n  //    TODO\n  // Note: undici does not implement forbidden header names\n  if (getHeadersGuard(headers) === 'immutable') {\n    throw new TypeError('immutable');\n  }\n\n  // 6. Otherwise, if headers’s guard is \"response\" and name is a\n  //    forbidden response-header name, return.\n\n  // 7. Append (name, value) to headers’s header list.\n  return getHeadersList(headers).append(name, value, false);\n\n  // 8. If headers’s guard is \"request-no-cors\", then remove\n  //    privileged no-CORS request headers from headers\n}\nfunction compareHeaderName(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null;\n  constructor(init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap]);\n      this[kHeadersSortedMap] = init[kHeadersSortedMap];\n      this.cookies = init.cookies === null ? null : [...init.cookies];\n    } else {\n      this[kHeadersMap] = new Map(init);\n      this[kHeadersSortedMap] = null;\n    }\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#header-list-contains\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */\n  contains(name, isLowerCase) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n\n    return this[kHeadersMap].has(isLowerCase ? name : name.toLowerCase());\n  }\n  clear() {\n    this[kHeadersMap].clear();\n    this[kHeadersSortedMap] = null;\n    this.cookies = null;\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-append\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */\n  append(name, value, isLowerCase) {\n    this[kHeadersSortedMap] = null;\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = isLowerCase ? name : name.toLowerCase();\n    const exists = this[kHeadersMap].get(lowercaseName);\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', ';\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      });\n    } else {\n      this[kHeadersMap].set(lowercaseName, {\n        name,\n        value\n      });\n    }\n    if (lowercaseName === 'set-cookie') {\n      (this.cookies ??= []).push(value);\n    }\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-set\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */\n  set(name, value, isLowerCase) {\n    this[kHeadersSortedMap] = null;\n    const lowercaseName = isLowerCase ? name : name.toLowerCase();\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value];\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    this[kHeadersMap].set(lowercaseName, {\n      name,\n      value\n    });\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-delete\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */\n  delete(name, isLowerCase) {\n    this[kHeadersSortedMap] = null;\n    if (!isLowerCase) name = name.toLowerCase();\n    if (name === 'set-cookie') {\n      this.cookies = null;\n    }\n    this[kHeadersMap].delete(name);\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-get\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   * @returns {string | null}\n   */\n  get(name, isLowerCase) {\n    // 1. If list does not contain name, then return null.\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(isLowerCase ? name : name.toLowerCase())?.value ?? null;\n  }\n  *[Symbol.iterator]() {\n    // use the lowercased name\n    for (const {\n      0: name,\n      1: {\n        value\n      }\n    } of this[kHeadersMap]) {\n      yield [name, value];\n    }\n  }\n  get entries() {\n    const headers = {};\n    if (this[kHeadersMap].size !== 0) {\n      for (const {\n        name,\n        value\n      } of this[kHeadersMap].values()) {\n        headers[name] = value;\n      }\n    }\n    return headers;\n  }\n  rawValues() {\n    return this[kHeadersMap].values();\n  }\n  get entriesList() {\n    const headers = [];\n    if (this[kHeadersMap].size !== 0) {\n      for (const {\n        0: lowerName,\n        1: {\n          name,\n          value\n        }\n      } of this[kHeadersMap]) {\n        if (lowerName === 'set-cookie') {\n          for (const cookie of this.cookies) {\n            headers.push([name, cookie]);\n          }\n        } else {\n          headers.push([name, value]);\n        }\n      }\n    }\n    return headers;\n  }\n\n  // https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set\n  toSortedArray() {\n    const size = this[kHeadersMap].size;\n    const array = new Array(size);\n    // In most cases, you will use the fast-path.\n    // fast-path: Use binary insertion sort for small arrays.\n    if (size <= 32) {\n      if (size === 0) {\n        // If empty, it is an empty array. To avoid the first index assignment.\n        return array;\n      }\n      // Improve performance by unrolling loop and avoiding double-loop.\n      // Double-loop-less version of the binary insertion sort.\n      const iterator = this[kHeadersMap][Symbol.iterator]();\n      const firstValue = iterator.next().value;\n      // set [name, value] to first index.\n      array[0] = [firstValue[0], firstValue[1].value];\n      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n      // 3.2.2. Assert: value is non-null.\n      assert(firstValue[1].value !== null);\n      for (let i = 1, j = 0, right = 0, left = 0, pivot = 0, x, value; i < size; ++i) {\n        // get next value\n        value = iterator.next().value;\n        // set [name, value] to current index.\n        x = array[i] = [value[0], value[1].value];\n        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n        // 3.2.2. Assert: value is non-null.\n        assert(x[1] !== null);\n        left = 0;\n        right = i;\n        // binary search\n        while (left < right) {\n          // middle index\n          pivot = left + (right - left >> 1);\n          // compare header name\n          if (array[pivot][0] <= x[0]) {\n            left = pivot + 1;\n          } else {\n            right = pivot;\n          }\n        }\n        if (i !== pivot) {\n          j = i;\n          while (j > left) {\n            array[j] = array[--j];\n          }\n          array[left] = x;\n        }\n      }\n      /* c8 ignore next 4 */\n      if (!iterator.next().done) {\n        // This is for debugging and will never be called.\n        throw new TypeError('Unreachable');\n      }\n      return array;\n    } else {\n      // This case would be a rare occurrence.\n      // slow-path: fallback\n      let i = 0;\n      for (const {\n        0: name,\n        1: {\n          value\n        }\n      } of this[kHeadersMap]) {\n        array[i++] = [name, value];\n        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n        // 3.2.2. Assert: value is non-null.\n        assert(value !== null);\n      }\n      return array.sort(compareHeaderName);\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  #guard;\n  #headersList;\n  constructor(init = undefined) {\n    if (init === kConstruct) {\n      return;\n    }\n    this.#headersList = new HeadersList();\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this.#guard = 'none';\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init, 'Headers contructor', 'init');\n      fill(this, init);\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, 'Headers.append');\n    const prefix = 'Headers.append';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n    value = webidl.converters.ByteString(value, prefix, 'value');\n    return appendHeader(this, name, value);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.delete');\n    const prefix = 'Headers.delete';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this.#guard === 'immutable') {\n      throw new TypeError('immutable');\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this.#headersList.contains(name, false)) {\n      return;\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    this.#headersList.delete(name, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.get');\n    const prefix = 'Headers.get';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this.#headersList.get(name, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.has');\n    const prefix = 'Headers.has';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this.#headersList.contains(name, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, 'Headers.set');\n    const prefix = 'Headers.set';\n    name = webidl.converters.ByteString(name, prefix, 'name');\n    value = webidl.converters.ByteString(value, prefix, 'value');\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      });\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value,\n        type: 'header value'\n      });\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this.#guard === 'immutable') {\n      throw new TypeError('immutable');\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    this.#headersList.set(name, value, false);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie() {\n    webidl.brandCheck(this, Headers);\n\n    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n    // 2. Return the values of all headers in this’s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this.#headersList.cookies;\n    if (list) {\n      return [...list];\n    }\n    return [];\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap]() {\n    if (this.#headersList[kHeadersSortedMap]) {\n      return this.#headersList[kHeadersSortedMap];\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = [];\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = this.#headersList.toSortedArray();\n    const cookies = this.#headersList.cookies;\n\n    // fast-path\n    if (cookies === null || cookies.length === 1) {\n      // Note: The non-null assertion of value has already been done by `HeadersList#toSortedArray`\n      return this.#headersList[kHeadersSortedMap] = names;\n    }\n\n    // 3. For each name of names:\n    for (let i = 0; i < names.length; ++i) {\n      const {\n        0: name,\n        1: value\n      } = names[i];\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (let j = 0; j < cookies.length; ++j) {\n          headers.push([name, cookies[j]]);\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        // Note: This operation was done by `HeadersList#toSortedArray`.\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value]);\n      }\n    }\n\n    // 4. Return headers.\n    return this.#headersList[kHeadersSortedMap] = headers;\n  }\n  [util.inspect.custom](depth, options) {\n    options.depth ??= depth;\n    return `Headers ${util.formatWithOptions(options, this.#headersList.entries)}`;\n  }\n  static getHeadersGuard(o) {\n    return o.#guard;\n  }\n  static setHeadersGuard(o, guard) {\n    o.#guard = guard;\n  }\n  static getHeadersList(o) {\n    return o.#headersList;\n  }\n  static setHeadersList(o, list) {\n    o.#headersList = list;\n  }\n}\nconst {\n  getHeadersGuard,\n  setHeadersGuard,\n  getHeadersList,\n  setHeadersList\n} = Headers;\nReflect.deleteProperty(Headers, 'getHeadersGuard');\nReflect.deleteProperty(Headers, 'setHeadersGuard');\nReflect.deleteProperty(Headers, 'getHeadersList');\nReflect.deleteProperty(Headers, 'setHeadersList');\niteratorMixin('Headers', Headers, kHeadersSortedMap, 0, 1);\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  getSetCookie: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  },\n  [util.inspect.custom]: {\n    enumerable: false\n  }\n});\nwebidl.converters.HeadersInit = function (V, prefix, argument) {\n  if (webidl.util.Type(V) === 'Object') {\n    const iterator = Reflect.get(V, Symbol.iterator);\n\n    // A work-around to ensure we send the properly-cased Headers when V is a Headers object.\n    // Read https://github.com/nodejs/undici/pull/3159#issuecomment-2075537226 before touching, please.\n    if (!util.types.isProxy(V) && iterator === Headers.prototype.entries) {\n      // Headers object\n      try {\n        return getHeadersList(V).entriesList;\n      } catch {\n        // fall-through\n      }\n    }\n    if (typeof iterator === 'function') {\n      return webidl.converters['sequence<sequence<ByteString>>'](V, prefix, argument, iterator.bind(V));\n    }\n    return webidl.converters['record<ByteString, ByteString>'](V, prefix, argument);\n  }\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  });\n};\nmodule.exports = {\n  fill,\n  // for test.\n  compareHeaderName,\n  Headers,\n  HeadersList,\n  getHeadersGuard,\n  setHeadersGuard,\n  setHeadersList,\n  getHeadersList\n};","map":{"version":3,"names":["kConstruct","require","kEnumerableProperty","iteratorMixin","isValidHeaderName","isValidHeaderValue","webidl","assert","util","kHeadersMap","Symbol","kHeadersSortedMap","isHTTPWhiteSpaceCharCode","code","headerValueNormalize","potentialValue","i","j","length","charCodeAt","substring","fill","headers","object","Array","isArray","header","errors","exception","message","appendHeader","keys","Object","conversionFailed","prefix","argument","types","name","value","invalidArgument","type","getHeadersGuard","TypeError","getHeadersList","append","compareHeaderName","a","b","HeadersList","cookies","constructor","init","Map","contains","isLowerCase","has","toLowerCase","clear","lowercaseName","exists","get","delimiter","set","push","delete","iterator","entries","size","values","rawValues","entriesList","lowerName","cookie","toSortedArray","array","firstValue","next","right","left","pivot","x","done","sort","Headers","guard","headersList","undefined","converters","HeadersInit","brandCheck","argumentLengthCheck","arguments","ByteString","getSetCookie","list","names","inspect","custom","depth","options","formatWithOptions","o","setHeadersGuard","setHeadersList","Reflect","deleteProperty","defineProperties","prototype","toStringTag","configurable","enumerable","V","Type","isProxy","bind","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/web/fetch/headers.js"],"sourcesContent":["// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst { kConstruct } = require('../../core/symbols')\nconst { kEnumerableProperty } = require('../../core/util')\nconst {\n  iteratorMixin,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util')\nconst { webidl } = require('./webidl')\nconst assert = require('node:assert')\nconst util = require('node:util')\n\nconst kHeadersMap = Symbol('headers map')\nconst kHeadersSortedMap = Symbol('headers map sorted')\n\n/**\n * @param {number} code\n */\nfunction isHTTPWhiteSpaceCharCode (code) {\n  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize (potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  let i = 0; let j = potentialValue.length\n\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i\n\n  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)\n}\n\nfunction fill (headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; ++i) {\n      const header = object[i]\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        })\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      appendHeader(headers, header[0], header[1])\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    const keys = Object.keys(object)\n    for (let i = 0; i < keys.length; ++i) {\n      appendHeader(headers, keys[i], object[keys[i]])\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    })\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */\nfunction appendHeader (headers, name, value) {\n  // 1. Normalize value.\n  value = headerValueNormalize(value)\n\n  // 2. If name is not a header name or value is not a\n  //    header value, then throw a TypeError.\n  if (!isValidHeaderName(name)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value: name,\n      type: 'header name'\n    })\n  } else if (!isValidHeaderValue(value)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value,\n      type: 'header value'\n    })\n  }\n\n  // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n  // 4. Otherwise, if headers’s guard is \"request\" and name is a\n  //    forbidden header name, return.\n  // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n  //    TODO\n  // Note: undici does not implement forbidden header names\n  if (getHeadersGuard(headers) === 'immutable') {\n    throw new TypeError('immutable')\n  }\n\n  // 6. Otherwise, if headers’s guard is \"response\" and name is a\n  //    forbidden response-header name, return.\n\n  // 7. Append (name, value) to headers’s header list.\n  return getHeadersList(headers).append(name, value, false)\n\n  // 8. If headers’s guard is \"request-no-cors\", then remove\n  //    privileged no-CORS request headers from headers\n}\n\nfunction compareHeaderName (a, b) {\n  return a[0] < b[0] ? -1 : 1\n}\n\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null\n\n  constructor (init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap])\n      this[kHeadersSortedMap] = init[kHeadersSortedMap]\n      this.cookies = init.cookies === null ? null : [...init.cookies]\n    } else {\n      this[kHeadersMap] = new Map(init)\n      this[kHeadersSortedMap] = null\n    }\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#header-list-contains\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */\n  contains (name, isLowerCase) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n\n    return this[kHeadersMap].has(isLowerCase ? name : name.toLowerCase())\n  }\n\n  clear () {\n    this[kHeadersMap].clear()\n    this[kHeadersSortedMap] = null\n    this.cookies = null\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-append\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */\n  append (name, value, isLowerCase) {\n    this[kHeadersSortedMap] = null\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = isLowerCase ? name : name.toLowerCase()\n    const exists = this[kHeadersMap].get(lowercaseName)\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      })\n    } else {\n      this[kHeadersMap].set(lowercaseName, { name, value })\n    }\n\n    if (lowercaseName === 'set-cookie') {\n      (this.cookies ??= []).push(value)\n    }\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-set\n   * @param {string} name\n   * @param {string} value\n   * @param {boolean} isLowerCase\n   */\n  set (name, value, isLowerCase) {\n    this[kHeadersSortedMap] = null\n    const lowercaseName = isLowerCase ? name : name.toLowerCase()\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value]\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    this[kHeadersMap].set(lowercaseName, { name, value })\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-delete\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   */\n  delete (name, isLowerCase) {\n    this[kHeadersSortedMap] = null\n    if (!isLowerCase) name = name.toLowerCase()\n\n    if (name === 'set-cookie') {\n      this.cookies = null\n    }\n\n    this[kHeadersMap].delete(name)\n  }\n\n  /**\n   * @see https://fetch.spec.whatwg.org/#concept-header-list-get\n   * @param {string} name\n   * @param {boolean} isLowerCase\n   * @returns {string | null}\n   */\n  get (name, isLowerCase) {\n    // 1. If list does not contain name, then return null.\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(isLowerCase ? name : name.toLowerCase())?.value ?? null\n  }\n\n  * [Symbol.iterator] () {\n    // use the lowercased name\n    for (const { 0: name, 1: { value } } of this[kHeadersMap]) {\n      yield [name, value]\n    }\n  }\n\n  get entries () {\n    const headers = {}\n\n    if (this[kHeadersMap].size !== 0) {\n      for (const { name, value } of this[kHeadersMap].values()) {\n        headers[name] = value\n      }\n    }\n\n    return headers\n  }\n\n  rawValues () {\n    return this[kHeadersMap].values()\n  }\n\n  get entriesList () {\n    const headers = []\n\n    if (this[kHeadersMap].size !== 0) {\n      for (const { 0: lowerName, 1: { name, value } } of this[kHeadersMap]) {\n        if (lowerName === 'set-cookie') {\n          for (const cookie of this.cookies) {\n            headers.push([name, cookie])\n          }\n        } else {\n          headers.push([name, value])\n        }\n      }\n    }\n\n    return headers\n  }\n\n  // https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set\n  toSortedArray () {\n    const size = this[kHeadersMap].size\n    const array = new Array(size)\n    // In most cases, you will use the fast-path.\n    // fast-path: Use binary insertion sort for small arrays.\n    if (size <= 32) {\n      if (size === 0) {\n        // If empty, it is an empty array. To avoid the first index assignment.\n        return array\n      }\n      // Improve performance by unrolling loop and avoiding double-loop.\n      // Double-loop-less version of the binary insertion sort.\n      const iterator = this[kHeadersMap][Symbol.iterator]()\n      const firstValue = iterator.next().value\n      // set [name, value] to first index.\n      array[0] = [firstValue[0], firstValue[1].value]\n      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n      // 3.2.2. Assert: value is non-null.\n      assert(firstValue[1].value !== null)\n      for (\n        let i = 1, j = 0, right = 0, left = 0, pivot = 0, x, value;\n        i < size;\n        ++i\n      ) {\n        // get next value\n        value = iterator.next().value\n        // set [name, value] to current index.\n        x = array[i] = [value[0], value[1].value]\n        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n        // 3.2.2. Assert: value is non-null.\n        assert(x[1] !== null)\n        left = 0\n        right = i\n        // binary search\n        while (left < right) {\n          // middle index\n          pivot = left + ((right - left) >> 1)\n          // compare header name\n          if (array[pivot][0] <= x[0]) {\n            left = pivot + 1\n          } else {\n            right = pivot\n          }\n        }\n        if (i !== pivot) {\n          j = i\n          while (j > left) {\n            array[j] = array[--j]\n          }\n          array[left] = x\n        }\n      }\n      /* c8 ignore next 4 */\n      if (!iterator.next().done) {\n        // This is for debugging and will never be called.\n        throw new TypeError('Unreachable')\n      }\n      return array\n    } else {\n      // This case would be a rare occurrence.\n      // slow-path: fallback\n      let i = 0\n      for (const { 0: name, 1: { value } } of this[kHeadersMap]) {\n        array[i++] = [name, value]\n        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n        // 3.2.2. Assert: value is non-null.\n        assert(value !== null)\n      }\n      return array.sort(compareHeaderName)\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  #guard\n  #headersList\n\n  constructor (init = undefined) {\n    if (init === kConstruct) {\n      return\n    }\n\n    this.#headersList = new HeadersList()\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this.#guard = 'none'\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init, 'Headers contructor', 'init')\n      fill(this, init)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, 'Headers.append')\n\n    const prefix = 'Headers.append'\n    name = webidl.converters.ByteString(name, prefix, 'name')\n    value = webidl.converters.ByteString(value, prefix, 'value')\n\n    return appendHeader(this, name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.delete')\n\n    const prefix = 'Headers.delete'\n    name = webidl.converters.ByteString(name, prefix, 'name')\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this.#guard === 'immutable') {\n      throw new TypeError('immutable')\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this.#headersList.contains(name, false)) {\n      return\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    this.#headersList.delete(name, false)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.get')\n\n    const prefix = 'Headers.get'\n    name = webidl.converters.ByteString(name, prefix, 'name')\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this.#headersList.get(name, false)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, 'Headers.has')\n\n    const prefix = 'Headers.has'\n    name = webidl.converters.ByteString(name, prefix, 'name')\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this.#headersList.contains(name, false)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, 'Headers.set')\n\n    const prefix = 'Headers.set'\n    name = webidl.converters.ByteString(name, prefix, 'name')\n    value = webidl.converters.ByteString(value, prefix, 'value')\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix,\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this.#guard === 'immutable') {\n      throw new TypeError('immutable')\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    this.#headersList.set(name, value, false)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie () {\n    webidl.brandCheck(this, Headers)\n\n    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n    // 2. Return the values of all headers in this’s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this.#headersList.cookies\n\n    if (list) {\n      return [...list]\n    }\n\n    return []\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap] () {\n    if (this.#headersList[kHeadersSortedMap]) {\n      return this.#headersList[kHeadersSortedMap]\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = []\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = this.#headersList.toSortedArray()\n\n    const cookies = this.#headersList.cookies\n\n    // fast-path\n    if (cookies === null || cookies.length === 1) {\n      // Note: The non-null assertion of value has already been done by `HeadersList#toSortedArray`\n      return (this.#headersList[kHeadersSortedMap] = names)\n    }\n\n    // 3. For each name of names:\n    for (let i = 0; i < names.length; ++i) {\n      const { 0: name, 1: value } = names[i]\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (let j = 0; j < cookies.length; ++j) {\n          headers.push([name, cookies[j]])\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        // Note: This operation was done by `HeadersList#toSortedArray`.\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value])\n      }\n    }\n\n    // 4. Return headers.\n    return (this.#headersList[kHeadersSortedMap] = headers)\n  }\n\n  [util.inspect.custom] (depth, options) {\n    options.depth ??= depth\n\n    return `Headers ${util.formatWithOptions(options, this.#headersList.entries)}`\n  }\n\n  static getHeadersGuard (o) {\n    return o.#guard\n  }\n\n  static setHeadersGuard (o, guard) {\n    o.#guard = guard\n  }\n\n  static getHeadersList (o) {\n    return o.#headersList\n  }\n\n  static setHeadersList (o, list) {\n    o.#headersList = list\n  }\n}\n\nconst { getHeadersGuard, setHeadersGuard, getHeadersList, setHeadersList } = Headers\nReflect.deleteProperty(Headers, 'getHeadersGuard')\nReflect.deleteProperty(Headers, 'setHeadersGuard')\nReflect.deleteProperty(Headers, 'getHeadersList')\nReflect.deleteProperty(Headers, 'setHeadersList')\n\niteratorMixin('Headers', Headers, kHeadersSortedMap, 0, 1)\n\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  getSetCookie: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  },\n  [util.inspect.custom]: {\n    enumerable: false\n  }\n})\n\nwebidl.converters.HeadersInit = function (V, prefix, argument) {\n  if (webidl.util.Type(V) === 'Object') {\n    const iterator = Reflect.get(V, Symbol.iterator)\n\n    // A work-around to ensure we send the properly-cased Headers when V is a Headers object.\n    // Read https://github.com/nodejs/undici/pull/3159#issuecomment-2075537226 before touching, please.\n    if (!util.types.isProxy(V) && iterator === Headers.prototype.entries) { // Headers object\n      try {\n        return getHeadersList(V).entriesList\n      } catch {\n        // fall-through\n      }\n    }\n\n    if (typeof iterator === 'function') {\n      return webidl.converters['sequence<sequence<ByteString>>'](V, prefix, argument, iterator.bind(V))\n    }\n\n    return webidl.converters['record<ByteString, ByteString>'](V, prefix, argument)\n  }\n\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  })\n}\n\nmodule.exports = {\n  fill,\n  // for test.\n  compareHeaderName,\n  Headers,\n  HeadersList,\n  getHeadersGuard,\n  setHeadersGuard,\n  setHeadersList,\n  getHeadersList\n}\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAW,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACpD,MAAM;EAAEC;AAAoB,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC1D,MAAM;EACJE,aAAa;EACbC,iBAAiB;EACjBC;AACF,CAAC,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AACrB,MAAM;EAAEK;AAAO,CAAC,GAAGL,OAAO,CAAC,UAAU,CAAC;AACtC,MAAMM,MAAM,GAAGN,OAAO,CAAC,aAAa,CAAC;AACrC,MAAMO,IAAI,GAAGP,OAAO,CAAC,WAAW,CAAC;AAEjC,MAAMQ,WAAW,GAAGC,MAAM,CAAC,aAAa,CAAC;AACzC,MAAMC,iBAAiB,GAAGD,MAAM,CAAC,oBAAoB,CAAC;;AAEtD;AACA;AACA;AACA,SAASE,wBAAwBA,CAAEC,IAAI,EAAE;EACvC,OAAOA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK;AAC7E;;AAEA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAAEC,cAAc,EAAE;EAC7C;EACA;EACA;EACA,IAAIC,CAAC,GAAG,CAAC;EAAE,IAAIC,CAAC,GAAGF,cAAc,CAACG,MAAM;EAExC,OAAOD,CAAC,GAAGD,CAAC,IAAIJ,wBAAwB,CAACG,cAAc,CAACI,UAAU,CAACF,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAEA,CAAC;EAC/E,OAAOA,CAAC,GAAGD,CAAC,IAAIJ,wBAAwB,CAACG,cAAc,CAACI,UAAU,CAACH,CAAC,CAAC,CAAC,EAAE,EAAEA,CAAC;EAE3E,OAAOA,CAAC,KAAK,CAAC,IAAIC,CAAC,KAAKF,cAAc,CAACG,MAAM,GAAGH,cAAc,GAAGA,cAAc,CAACK,SAAS,CAACJ,CAAC,EAAEC,CAAC,CAAC;AACjG;AAEA,SAASI,IAAIA,CAAEC,OAAO,EAAEC,MAAM,EAAE;EAC9B;;EAEA;EACA;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IACzB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,MAAM,CAACL,MAAM,EAAE,EAAEF,CAAC,EAAE;MACtC,MAAMU,MAAM,GAAGH,MAAM,CAACP,CAAC,CAAC;MACxB;MACA,IAAIU,MAAM,CAACR,MAAM,KAAK,CAAC,EAAE;QACvB,MAAMZ,MAAM,CAACqB,MAAM,CAACC,SAAS,CAAC;UAC5BF,MAAM,EAAE,qBAAqB;UAC7BG,OAAO,EAAE,kDAAkDH,MAAM,CAACR,MAAM;QAC1E,CAAC,CAAC;MACJ;;MAEA;MACAY,YAAY,CAACR,OAAO,EAAEI,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;IAC7C;EACF,CAAC,MAAM,IAAI,OAAOH,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,IAAI,EAAE;IACxD;;IAEA;IACA;IACA,MAAMQ,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACR,MAAM,CAAC;IAChC,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGe,IAAI,CAACb,MAAM,EAAE,EAAEF,CAAC,EAAE;MACpCc,YAAY,CAACR,OAAO,EAAES,IAAI,CAACf,CAAC,CAAC,EAAEO,MAAM,CAACQ,IAAI,CAACf,CAAC,CAAC,CAAC,CAAC;IACjD;EACF,CAAC,MAAM;IACL,MAAMV,MAAM,CAACqB,MAAM,CAACM,gBAAgB,CAAC;MACnCC,MAAM,EAAE,qBAAqB;MAC7BC,QAAQ,EAAE,YAAY;MACtBC,KAAK,EAAE,CAAC,gCAAgC,EAAE,gCAAgC;IAC5E,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA,SAASN,YAAYA,CAAER,OAAO,EAAEe,IAAI,EAAEC,KAAK,EAAE;EAC3C;EACAA,KAAK,GAAGxB,oBAAoB,CAACwB,KAAK,CAAC;;EAEnC;EACA;EACA,IAAI,CAAClC,iBAAiB,CAACiC,IAAI,CAAC,EAAE;IAC5B,MAAM/B,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;MAClCL,MAAM,EAAE,gBAAgB;MACxBI,KAAK,EAAED,IAAI;MACXG,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC,MAAM,IAAI,CAACnC,kBAAkB,CAACiC,KAAK,CAAC,EAAE;IACrC,MAAMhC,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;MAClCL,MAAM,EAAE,gBAAgB;MACxBI,KAAK;MACLE,IAAI,EAAE;IACR,CAAC,CAAC;EACJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,eAAe,CAACnB,OAAO,CAAC,KAAK,WAAW,EAAE;IAC5C,MAAM,IAAIoB,SAAS,CAAC,WAAW,CAAC;EAClC;;EAEA;EACA;;EAEA;EACA,OAAOC,cAAc,CAACrB,OAAO,CAAC,CAACsB,MAAM,CAACP,IAAI,EAAEC,KAAK,EAAE,KAAK,CAAC;;EAEzD;EACA;AACF;AAEA,SAASO,iBAAiBA,CAAEC,CAAC,EAAEC,CAAC,EAAE;EAChC,OAAOD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AAC7B;AAEA,MAAMC,WAAW,CAAC;EAChB;EACAC,OAAO,GAAG,IAAI;EAEdC,WAAWA,CAAEC,IAAI,EAAE;IACjB,IAAIA,IAAI,YAAYH,WAAW,EAAE;MAC/B,IAAI,CAACvC,WAAW,CAAC,GAAG,IAAI2C,GAAG,CAACD,IAAI,CAAC1C,WAAW,CAAC,CAAC;MAC9C,IAAI,CAACE,iBAAiB,CAAC,GAAGwC,IAAI,CAACxC,iBAAiB,CAAC;MACjD,IAAI,CAACsC,OAAO,GAAGE,IAAI,CAACF,OAAO,KAAK,IAAI,GAAG,IAAI,GAAG,CAAC,GAAGE,IAAI,CAACF,OAAO,CAAC;IACjE,CAAC,MAAM;MACL,IAAI,CAACxC,WAAW,CAAC,GAAG,IAAI2C,GAAG,CAACD,IAAI,CAAC;MACjC,IAAI,CAACxC,iBAAiB,CAAC,GAAG,IAAI;IAChC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE0C,QAAQA,CAAEhB,IAAI,EAAEiB,WAAW,EAAE;IAC3B;IACA;IACA;;IAEA,OAAO,IAAI,CAAC7C,WAAW,CAAC,CAAC8C,GAAG,CAACD,WAAW,GAAGjB,IAAI,GAAGA,IAAI,CAACmB,WAAW,CAAC,CAAC,CAAC;EACvE;EAEAC,KAAKA,CAAA,EAAI;IACP,IAAI,CAAChD,WAAW,CAAC,CAACgD,KAAK,CAAC,CAAC;IACzB,IAAI,CAAC9C,iBAAiB,CAAC,GAAG,IAAI;IAC9B,IAAI,CAACsC,OAAO,GAAG,IAAI;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEL,MAAMA,CAAEP,IAAI,EAAEC,KAAK,EAAEgB,WAAW,EAAE;IAChC,IAAI,CAAC3C,iBAAiB,CAAC,GAAG,IAAI;;IAE9B;IACA;IACA,MAAM+C,aAAa,GAAGJ,WAAW,GAAGjB,IAAI,GAAGA,IAAI,CAACmB,WAAW,CAAC,CAAC;IAC7D,MAAMG,MAAM,GAAG,IAAI,CAAClD,WAAW,CAAC,CAACmD,GAAG,CAACF,aAAa,CAAC;;IAEnD;IACA,IAAIC,MAAM,EAAE;MACV,MAAME,SAAS,GAAGH,aAAa,KAAK,QAAQ,GAAG,IAAI,GAAG,IAAI;MAC1D,IAAI,CAACjD,WAAW,CAAC,CAACqD,GAAG,CAACJ,aAAa,EAAE;QACnCrB,IAAI,EAAEsB,MAAM,CAACtB,IAAI;QACjBC,KAAK,EAAE,GAAGqB,MAAM,CAACrB,KAAK,GAAGuB,SAAS,GAAGvB,KAAK;MAC5C,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAAC7B,WAAW,CAAC,CAACqD,GAAG,CAACJ,aAAa,EAAE;QAAErB,IAAI;QAAEC;MAAM,CAAC,CAAC;IACvD;IAEA,IAAIoB,aAAa,KAAK,YAAY,EAAE;MAClC,CAAC,IAAI,CAACT,OAAO,KAAK,EAAE,EAAEc,IAAI,CAACzB,KAAK,CAAC;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEwB,GAAGA,CAAEzB,IAAI,EAAEC,KAAK,EAAEgB,WAAW,EAAE;IAC7B,IAAI,CAAC3C,iBAAiB,CAAC,GAAG,IAAI;IAC9B,MAAM+C,aAAa,GAAGJ,WAAW,GAAGjB,IAAI,GAAGA,IAAI,CAACmB,WAAW,CAAC,CAAC;IAE7D,IAAIE,aAAa,KAAK,YAAY,EAAE;MAClC,IAAI,CAACT,OAAO,GAAG,CAACX,KAAK,CAAC;IACxB;;IAEA;IACA;IACA;IACA;IACA,IAAI,CAAC7B,WAAW,CAAC,CAACqD,GAAG,CAACJ,aAAa,EAAE;MAAErB,IAAI;MAAEC;IAAM,CAAC,CAAC;EACvD;;EAEA;AACF;AACA;AACA;AACA;EACE0B,MAAMA,CAAE3B,IAAI,EAAEiB,WAAW,EAAE;IACzB,IAAI,CAAC3C,iBAAiB,CAAC,GAAG,IAAI;IAC9B,IAAI,CAAC2C,WAAW,EAAEjB,IAAI,GAAGA,IAAI,CAACmB,WAAW,CAAC,CAAC;IAE3C,IAAInB,IAAI,KAAK,YAAY,EAAE;MACzB,IAAI,CAACY,OAAO,GAAG,IAAI;IACrB;IAEA,IAAI,CAACxC,WAAW,CAAC,CAACuD,MAAM,CAAC3B,IAAI,CAAC;EAChC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEuB,GAAGA,CAAEvB,IAAI,EAAEiB,WAAW,EAAE;IACtB;IACA;IACA;IACA;IACA,OAAO,IAAI,CAAC7C,WAAW,CAAC,CAACmD,GAAG,CAACN,WAAW,GAAGjB,IAAI,GAAGA,IAAI,CAACmB,WAAW,CAAC,CAAC,CAAC,EAAElB,KAAK,IAAI,IAAI;EACtF;EAEA,EAAG5B,MAAM,CAACuD,QAAQ,IAAK;IACrB;IACA,KAAK,MAAM;MAAE,CAAC,EAAE5B,IAAI;MAAE,CAAC,EAAE;QAAEC;MAAM;IAAE,CAAC,IAAI,IAAI,CAAC7B,WAAW,CAAC,EAAE;MACzD,MAAM,CAAC4B,IAAI,EAAEC,KAAK,CAAC;IACrB;EACF;EAEA,IAAI4B,OAAOA,CAAA,EAAI;IACb,MAAM5C,OAAO,GAAG,CAAC,CAAC;IAElB,IAAI,IAAI,CAACb,WAAW,CAAC,CAAC0D,IAAI,KAAK,CAAC,EAAE;MAChC,KAAK,MAAM;QAAE9B,IAAI;QAAEC;MAAM,CAAC,IAAI,IAAI,CAAC7B,WAAW,CAAC,CAAC2D,MAAM,CAAC,CAAC,EAAE;QACxD9C,OAAO,CAACe,IAAI,CAAC,GAAGC,KAAK;MACvB;IACF;IAEA,OAAOhB,OAAO;EAChB;EAEA+C,SAASA,CAAA,EAAI;IACX,OAAO,IAAI,CAAC5D,WAAW,CAAC,CAAC2D,MAAM,CAAC,CAAC;EACnC;EAEA,IAAIE,WAAWA,CAAA,EAAI;IACjB,MAAMhD,OAAO,GAAG,EAAE;IAElB,IAAI,IAAI,CAACb,WAAW,CAAC,CAAC0D,IAAI,KAAK,CAAC,EAAE;MAChC,KAAK,MAAM;QAAE,CAAC,EAAEI,SAAS;QAAE,CAAC,EAAE;UAAElC,IAAI;UAAEC;QAAM;MAAE,CAAC,IAAI,IAAI,CAAC7B,WAAW,CAAC,EAAE;QACpE,IAAI8D,SAAS,KAAK,YAAY,EAAE;UAC9B,KAAK,MAAMC,MAAM,IAAI,IAAI,CAACvB,OAAO,EAAE;YACjC3B,OAAO,CAACyC,IAAI,CAAC,CAAC1B,IAAI,EAAEmC,MAAM,CAAC,CAAC;UAC9B;QACF,CAAC,MAAM;UACLlD,OAAO,CAACyC,IAAI,CAAC,CAAC1B,IAAI,EAAEC,KAAK,CAAC,CAAC;QAC7B;MACF;IACF;IAEA,OAAOhB,OAAO;EAChB;;EAEA;EACAmD,aAAaA,CAAA,EAAI;IACf,MAAMN,IAAI,GAAG,IAAI,CAAC1D,WAAW,CAAC,CAAC0D,IAAI;IACnC,MAAMO,KAAK,GAAG,IAAIlD,KAAK,CAAC2C,IAAI,CAAC;IAC7B;IACA;IACA,IAAIA,IAAI,IAAI,EAAE,EAAE;MACd,IAAIA,IAAI,KAAK,CAAC,EAAE;QACd;QACA,OAAOO,KAAK;MACd;MACA;MACA;MACA,MAAMT,QAAQ,GAAG,IAAI,CAACxD,WAAW,CAAC,CAACC,MAAM,CAACuD,QAAQ,CAAC,CAAC,CAAC;MACrD,MAAMU,UAAU,GAAGV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACtC,KAAK;MACxC;MACAoC,KAAK,CAAC,CAAC,CAAC,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEA,UAAU,CAAC,CAAC,CAAC,CAACrC,KAAK,CAAC;MAC/C;MACA;MACA/B,MAAM,CAACoE,UAAU,CAAC,CAAC,CAAC,CAACrC,KAAK,KAAK,IAAI,CAAC;MACpC,KACE,IAAItB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAE4D,KAAK,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEC,CAAC,EAAE1C,KAAK,EAC1DtB,CAAC,GAAGmD,IAAI,EACR,EAAEnD,CAAC,EACH;QACA;QACAsB,KAAK,GAAG2B,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACtC,KAAK;QAC7B;QACA0C,CAAC,GAAGN,KAAK,CAAC1D,CAAC,CAAC,GAAG,CAACsB,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC;QACzC;QACA;QACA/B,MAAM,CAACyE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;QACrBF,IAAI,GAAG,CAAC;QACRD,KAAK,GAAG7D,CAAC;QACT;QACA,OAAO8D,IAAI,GAAGD,KAAK,EAAE;UACnB;UACAE,KAAK,GAAGD,IAAI,IAAKD,KAAK,GAAGC,IAAI,IAAK,CAAC,CAAC;UACpC;UACA,IAAIJ,KAAK,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,EAAE;YAC3BF,IAAI,GAAGC,KAAK,GAAG,CAAC;UAClB,CAAC,MAAM;YACLF,KAAK,GAAGE,KAAK;UACf;QACF;QACA,IAAI/D,CAAC,KAAK+D,KAAK,EAAE;UACf9D,CAAC,GAAGD,CAAC;UACL,OAAOC,CAAC,GAAG6D,IAAI,EAAE;YACfJ,KAAK,CAACzD,CAAC,CAAC,GAAGyD,KAAK,CAAC,EAAEzD,CAAC,CAAC;UACvB;UACAyD,KAAK,CAACI,IAAI,CAAC,GAAGE,CAAC;QACjB;MACF;MACA;MACA,IAAI,CAACf,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACK,IAAI,EAAE;QACzB;QACA,MAAM,IAAIvC,SAAS,CAAC,aAAa,CAAC;MACpC;MACA,OAAOgC,KAAK;IACd,CAAC,MAAM;MACL;MACA;MACA,IAAI1D,CAAC,GAAG,CAAC;MACT,KAAK,MAAM;QAAE,CAAC,EAAEqB,IAAI;QAAE,CAAC,EAAE;UAAEC;QAAM;MAAE,CAAC,IAAI,IAAI,CAAC7B,WAAW,CAAC,EAAE;QACzDiE,KAAK,CAAC1D,CAAC,EAAE,CAAC,GAAG,CAACqB,IAAI,EAAEC,KAAK,CAAC;QAC1B;QACA;QACA/B,MAAM,CAAC+B,KAAK,KAAK,IAAI,CAAC;MACxB;MACA,OAAOoC,KAAK,CAACQ,IAAI,CAACrC,iBAAiB,CAAC;IACtC;EACF;AACF;;AAEA;AACA,MAAMsC,OAAO,CAAC;EACZ,CAACC,KAAK;EACN,CAACC,WAAW;EAEZnC,WAAWA,CAAEC,IAAI,GAAGmC,SAAS,EAAE;IAC7B,IAAInC,IAAI,KAAKnD,UAAU,EAAE;MACvB;IACF;IAEA,IAAI,CAAC,CAACqF,WAAW,GAAG,IAAIrC,WAAW,CAAC,CAAC;;IAErC;;IAEA;IACA,IAAI,CAAC,CAACoC,KAAK,GAAG,MAAM;;IAEpB;IACA,IAAIjC,IAAI,KAAKmC,SAAS,EAAE;MACtBnC,IAAI,GAAG7C,MAAM,CAACiF,UAAU,CAACC,WAAW,CAACrC,IAAI,EAAE,oBAAoB,EAAE,MAAM,CAAC;MACxE9B,IAAI,CAAC,IAAI,EAAE8B,IAAI,CAAC;IAClB;EACF;;EAEA;EACAP,MAAMA,CAAEP,IAAI,EAAEC,KAAK,EAAE;IACnBhC,MAAM,CAACmF,UAAU,CAAC,IAAI,EAAEN,OAAO,CAAC;IAEhC7E,MAAM,CAACoF,mBAAmB,CAACC,SAAS,EAAE,CAAC,EAAE,gBAAgB,CAAC;IAE1D,MAAMzD,MAAM,GAAG,gBAAgB;IAC/BG,IAAI,GAAG/B,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACvD,IAAI,EAAEH,MAAM,EAAE,MAAM,CAAC;IACzDI,KAAK,GAAGhC,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACtD,KAAK,EAAEJ,MAAM,EAAE,OAAO,CAAC;IAE5D,OAAOJ,YAAY,CAAC,IAAI,EAAEO,IAAI,EAAEC,KAAK,CAAC;EACxC;;EAEA;EACA0B,MAAMA,CAAE3B,IAAI,EAAE;IACZ/B,MAAM,CAACmF,UAAU,CAAC,IAAI,EAAEN,OAAO,CAAC;IAEhC7E,MAAM,CAACoF,mBAAmB,CAACC,SAAS,EAAE,CAAC,EAAE,gBAAgB,CAAC;IAE1D,MAAMzD,MAAM,GAAG,gBAAgB;IAC/BG,IAAI,GAAG/B,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACvD,IAAI,EAAEH,MAAM,EAAE,MAAM,CAAC;;IAEzD;IACA,IAAI,CAAC9B,iBAAiB,CAACiC,IAAI,CAAC,EAAE;MAC5B,MAAM/B,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;QAClCL,MAAM,EAAE,gBAAgB;QACxBI,KAAK,EAAED,IAAI;QACXG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,CAAC4C,KAAK,KAAK,WAAW,EAAE;MAC/B,MAAM,IAAI1C,SAAS,CAAC,WAAW,CAAC;IAClC;;IAEA;IACA;IACA,IAAI,CAAC,IAAI,CAAC,CAAC2C,WAAW,CAAChC,QAAQ,CAAChB,IAAI,EAAE,KAAK,CAAC,EAAE;MAC5C;IACF;;IAEA;IACA;IACA;IACA,IAAI,CAAC,CAACgD,WAAW,CAACrB,MAAM,CAAC3B,IAAI,EAAE,KAAK,CAAC;EACvC;;EAEA;EACAuB,GAAGA,CAAEvB,IAAI,EAAE;IACT/B,MAAM,CAACmF,UAAU,CAAC,IAAI,EAAEN,OAAO,CAAC;IAEhC7E,MAAM,CAACoF,mBAAmB,CAACC,SAAS,EAAE,CAAC,EAAE,aAAa,CAAC;IAEvD,MAAMzD,MAAM,GAAG,aAAa;IAC5BG,IAAI,GAAG/B,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACvD,IAAI,EAAEH,MAAM,EAAE,MAAM,CAAC;;IAEzD;IACA,IAAI,CAAC9B,iBAAiB,CAACiC,IAAI,CAAC,EAAE;MAC5B,MAAM/B,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;QAClCL,MAAM;QACNI,KAAK,EAAED,IAAI;QACXG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;;IAEA;IACA;IACA,OAAO,IAAI,CAAC,CAAC6C,WAAW,CAACzB,GAAG,CAACvB,IAAI,EAAE,KAAK,CAAC;EAC3C;;EAEA;EACAkB,GAAGA,CAAElB,IAAI,EAAE;IACT/B,MAAM,CAACmF,UAAU,CAAC,IAAI,EAAEN,OAAO,CAAC;IAEhC7E,MAAM,CAACoF,mBAAmB,CAACC,SAAS,EAAE,CAAC,EAAE,aAAa,CAAC;IAEvD,MAAMzD,MAAM,GAAG,aAAa;IAC5BG,IAAI,GAAG/B,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACvD,IAAI,EAAEH,MAAM,EAAE,MAAM,CAAC;;IAEzD;IACA,IAAI,CAAC9B,iBAAiB,CAACiC,IAAI,CAAC,EAAE;MAC5B,MAAM/B,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;QAClCL,MAAM;QACNI,KAAK,EAAED,IAAI;QACXG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;;IAEA;IACA;IACA,OAAO,IAAI,CAAC,CAAC6C,WAAW,CAAChC,QAAQ,CAAChB,IAAI,EAAE,KAAK,CAAC;EAChD;;EAEA;EACAyB,GAAGA,CAAEzB,IAAI,EAAEC,KAAK,EAAE;IAChBhC,MAAM,CAACmF,UAAU,CAAC,IAAI,EAAEN,OAAO,CAAC;IAEhC7E,MAAM,CAACoF,mBAAmB,CAACC,SAAS,EAAE,CAAC,EAAE,aAAa,CAAC;IAEvD,MAAMzD,MAAM,GAAG,aAAa;IAC5BG,IAAI,GAAG/B,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACvD,IAAI,EAAEH,MAAM,EAAE,MAAM,CAAC;IACzDI,KAAK,GAAGhC,MAAM,CAACiF,UAAU,CAACK,UAAU,CAACtD,KAAK,EAAEJ,MAAM,EAAE,OAAO,CAAC;;IAE5D;IACAI,KAAK,GAAGxB,oBAAoB,CAACwB,KAAK,CAAC;;IAEnC;IACA;IACA,IAAI,CAAClC,iBAAiB,CAACiC,IAAI,CAAC,EAAE;MAC5B,MAAM/B,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;QAClCL,MAAM;QACNI,KAAK,EAAED,IAAI;QACXG,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACnC,kBAAkB,CAACiC,KAAK,CAAC,EAAE;MACrC,MAAMhC,MAAM,CAACqB,MAAM,CAACY,eAAe,CAAC;QAClCL,MAAM;QACNI,KAAK;QACLE,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC,CAAC4C,KAAK,KAAK,WAAW,EAAE;MAC/B,MAAM,IAAI1C,SAAS,CAAC,WAAW,CAAC;IAClC;;IAEA;IACA;IACA;IACA,IAAI,CAAC,CAAC2C,WAAW,CAACvB,GAAG,CAACzB,IAAI,EAAEC,KAAK,EAAE,KAAK,CAAC;EAC3C;;EAEA;EACAuD,YAAYA,CAAA,EAAI;IACdvF,MAAM,CAACmF,UAAU,CAAC,IAAI,EAAEN,OAAO,CAAC;;IAEhC;IACA;IACA;;IAEA,MAAMW,IAAI,GAAG,IAAI,CAAC,CAACT,WAAW,CAACpC,OAAO;IAEtC,IAAI6C,IAAI,EAAE;MACR,OAAO,CAAC,GAAGA,IAAI,CAAC;IAClB;IAEA,OAAO,EAAE;EACX;;EAEA;EACA,KAAKnF,iBAAiB,IAAK;IACzB,IAAI,IAAI,CAAC,CAAC0E,WAAW,CAAC1E,iBAAiB,CAAC,EAAE;MACxC,OAAO,IAAI,CAAC,CAAC0E,WAAW,CAAC1E,iBAAiB,CAAC;IAC7C;;IAEA;IACA;IACA,MAAMW,OAAO,GAAG,EAAE;;IAElB;IACA;IACA,MAAMyE,KAAK,GAAG,IAAI,CAAC,CAACV,WAAW,CAACZ,aAAa,CAAC,CAAC;IAE/C,MAAMxB,OAAO,GAAG,IAAI,CAAC,CAACoC,WAAW,CAACpC,OAAO;;IAEzC;IACA,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,CAAC/B,MAAM,KAAK,CAAC,EAAE;MAC5C;MACA,OAAQ,IAAI,CAAC,CAACmE,WAAW,CAAC1E,iBAAiB,CAAC,GAAGoF,KAAK;IACtD;;IAEA;IACA,KAAK,IAAI/E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+E,KAAK,CAAC7E,MAAM,EAAE,EAAEF,CAAC,EAAE;MACrC,MAAM;QAAE,CAAC,EAAEqB,IAAI;QAAE,CAAC,EAAEC;MAAM,CAAC,GAAGyD,KAAK,CAAC/E,CAAC,CAAC;MACtC;MACA,IAAIqB,IAAI,KAAK,YAAY,EAAE;QACzB;QACA;;QAEA;QACA;QACA,KAAK,IAAIpB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgC,OAAO,CAAC/B,MAAM,EAAE,EAAED,CAAC,EAAE;UACvCK,OAAO,CAACyC,IAAI,CAAC,CAAC1B,IAAI,EAAEY,OAAO,CAAChC,CAAC,CAAC,CAAC,CAAC;QAClC;MACF,CAAC,MAAM;QACL;;QAEA;;QAEA;QACA;;QAEA;QACAK,OAAO,CAACyC,IAAI,CAAC,CAAC1B,IAAI,EAAEC,KAAK,CAAC,CAAC;MAC7B;IACF;;IAEA;IACA,OAAQ,IAAI,CAAC,CAAC+C,WAAW,CAAC1E,iBAAiB,CAAC,GAAGW,OAAO;EACxD;EAEA,CAACd,IAAI,CAACwF,OAAO,CAACC,MAAM,EAAGC,KAAK,EAAEC,OAAO,EAAE;IACrCA,OAAO,CAACD,KAAK,KAAKA,KAAK;IAEvB,OAAO,WAAW1F,IAAI,CAAC4F,iBAAiB,CAACD,OAAO,EAAE,IAAI,CAAC,CAACd,WAAW,CAACnB,OAAO,CAAC,EAAE;EAChF;EAEA,OAAOzB,eAAeA,CAAE4D,CAAC,EAAE;IACzB,OAAOA,CAAC,CAAC,CAACjB,KAAK;EACjB;EAEA,OAAOkB,eAAeA,CAAED,CAAC,EAAEjB,KAAK,EAAE;IAChCiB,CAAC,CAAC,CAACjB,KAAK,GAAGA,KAAK;EAClB;EAEA,OAAOzC,cAAcA,CAAE0D,CAAC,EAAE;IACxB,OAAOA,CAAC,CAAC,CAAChB,WAAW;EACvB;EAEA,OAAOkB,cAAcA,CAAEF,CAAC,EAAEP,IAAI,EAAE;IAC9BO,CAAC,CAAC,CAAChB,WAAW,GAAGS,IAAI;EACvB;AACF;AAEA,MAAM;EAAErD,eAAe;EAAE6D,eAAe;EAAE3D,cAAc;EAAE4D;AAAe,CAAC,GAAGpB,OAAO;AACpFqB,OAAO,CAACC,cAAc,CAACtB,OAAO,EAAE,iBAAiB,CAAC;AAClDqB,OAAO,CAACC,cAAc,CAACtB,OAAO,EAAE,iBAAiB,CAAC;AAClDqB,OAAO,CAACC,cAAc,CAACtB,OAAO,EAAE,gBAAgB,CAAC;AACjDqB,OAAO,CAACC,cAAc,CAACtB,OAAO,EAAE,gBAAgB,CAAC;AAEjDhF,aAAa,CAAC,SAAS,EAAEgF,OAAO,EAAExE,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC;AAE1DqB,MAAM,CAAC0E,gBAAgB,CAACvB,OAAO,CAACwB,SAAS,EAAE;EACzC/D,MAAM,EAAE1C,mBAAmB;EAC3B8D,MAAM,EAAE9D,mBAAmB;EAC3B0D,GAAG,EAAE1D,mBAAmB;EACxBqD,GAAG,EAAErD,mBAAmB;EACxB4D,GAAG,EAAE5D,mBAAmB;EACxB2F,YAAY,EAAE3F,mBAAmB;EACjC,CAACQ,MAAM,CAACkG,WAAW,GAAG;IACpBtE,KAAK,EAAE,SAAS;IAChBuE,YAAY,EAAE;EAChB,CAAC;EACD,CAACrG,IAAI,CAACwF,OAAO,CAACC,MAAM,GAAG;IACrBa,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEFxG,MAAM,CAACiF,UAAU,CAACC,WAAW,GAAG,UAAUuB,CAAC,EAAE7E,MAAM,EAAEC,QAAQ,EAAE;EAC7D,IAAI7B,MAAM,CAACE,IAAI,CAACwG,IAAI,CAACD,CAAC,CAAC,KAAK,QAAQ,EAAE;IACpC,MAAM9C,QAAQ,GAAGuC,OAAO,CAAC5C,GAAG,CAACmD,CAAC,EAAErG,MAAM,CAACuD,QAAQ,CAAC;;IAEhD;IACA;IACA,IAAI,CAACzD,IAAI,CAAC4B,KAAK,CAAC6E,OAAO,CAACF,CAAC,CAAC,IAAI9C,QAAQ,KAAKkB,OAAO,CAACwB,SAAS,CAACzC,OAAO,EAAE;MAAE;MACtE,IAAI;QACF,OAAOvB,cAAc,CAACoE,CAAC,CAAC,CAACzC,WAAW;MACtC,CAAC,CAAC,MAAM;QACN;MAAA;IAEJ;IAEA,IAAI,OAAOL,QAAQ,KAAK,UAAU,EAAE;MAClC,OAAO3D,MAAM,CAACiF,UAAU,CAAC,gCAAgC,CAAC,CAACwB,CAAC,EAAE7E,MAAM,EAAEC,QAAQ,EAAE8B,QAAQ,CAACiD,IAAI,CAACH,CAAC,CAAC,CAAC;IACnG;IAEA,OAAOzG,MAAM,CAACiF,UAAU,CAAC,gCAAgC,CAAC,CAACwB,CAAC,EAAE7E,MAAM,EAAEC,QAAQ,CAAC;EACjF;EAEA,MAAM7B,MAAM,CAACqB,MAAM,CAACM,gBAAgB,CAAC;IACnCC,MAAM,EAAE,qBAAqB;IAC7BC,QAAQ,EAAE,YAAY;IACtBC,KAAK,EAAE,CAAC,gCAAgC,EAAE,gCAAgC;EAC5E,CAAC,CAAC;AACJ,CAAC;AAED+E,MAAM,CAACC,OAAO,GAAG;EACf/F,IAAI;EACJ;EACAwB,iBAAiB;EACjBsC,OAAO;EACPnC,WAAW;EACXP,eAAe;EACf6D,eAAe;EACfC,cAAc;EACd5D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}