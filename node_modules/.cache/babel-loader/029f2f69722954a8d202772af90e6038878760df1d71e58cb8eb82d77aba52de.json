{"ast":null,"code":"/* globals AbortController */\n\n'use strict';\n\nconst {\n  extractBody,\n  mixinBody,\n  cloneBody,\n  bodyUnusable\n} = require('./body');\nconst {\n  Headers,\n  fill: fillHeaders,\n  HeadersList,\n  setHeadersGuard,\n  getHeadersGuard,\n  setHeadersList,\n  getHeadersList\n} = require('./headers');\nconst {\n  FinalizationRegistry\n} = require('./dispatcher-weakref')();\nconst util = require('../../core/util');\nconst nodeUtil = require('node:util');\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  environmentSettingsObject\n} = require('./util');\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants');\nconst {\n  kEnumerableProperty,\n  normalizedMethodRecordsBase,\n  normalizedMethodRecords\n} = util;\nconst {\n  kHeaders,\n  kSignal,\n  kState,\n  kDispatcher\n} = require('./symbols');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  URLSerializer\n} = require('./data-url');\nconst {\n  kConstruct\n} = require('../../core/symbols');\nconst assert = require('node:assert');\nconst {\n  getMaxListeners,\n  setMaxListeners,\n  getEventListeners,\n  defaultMaxListeners\n} = require('node:events');\nconst kAbortController = Symbol('abortController');\nconst requestFinalizer = new FinalizationRegistry(({\n  signal,\n  abort\n}) => {\n  signal.removeEventListener('abort', abort);\n});\nconst dependentControllerMap = new WeakMap();\nfunction buildAbort(acRef) {\n  return abort;\n  function abort() {\n    const ac = acRef.deref();\n    if (ac !== undefined) {\n      // Currently, there is a problem with FinalizationRegistry.\n      // https://github.com/nodejs/node/issues/49344\n      // https://github.com/nodejs/node/issues/47748\n      // In the case of abort, the first step is to unregister from it.\n      // If the controller can refer to it, it is still registered.\n      // It will be removed in the future.\n      requestFinalizer.unregister(abort);\n\n      // Unsubscribe a listener.\n      // FinalizationRegistry will no longer be called, so this must be done.\n      this.removeEventListener('abort', abort);\n      ac.abort(this.reason);\n      const controllerList = dependentControllerMap.get(ac.signal);\n      if (controllerList !== undefined) {\n        if (controllerList.size !== 0) {\n          for (const ref of controllerList) {\n            const ctrl = ref.deref();\n            if (ctrl !== undefined) {\n              ctrl.abort(this.reason);\n            }\n          }\n          controllerList.clear();\n        }\n        dependentControllerMap.delete(ac.signal);\n      }\n    }\n  }\n}\nlet patchMethodWarning = false;\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor(input, init = {}) {\n    if (input === kConstruct) {\n      return;\n    }\n    const prefix = 'Request constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    input = webidl.converters.RequestInfo(input, prefix, 'input');\n    init = webidl.converters.RequestInit(init, prefix, 'init');\n\n    // 1. Let request be null.\n    let request = null;\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null;\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = environmentSettingsObject.settingsObject.baseUrl;\n\n    // 4. Let signal be null.\n    let signal = null;\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      this[kDispatcher] = init.dispatcher;\n\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL;\n      try {\n        parsedURL = new URL(input, baseUrl);\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, {\n          cause: err\n        });\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({\n        urlList: [parsedURL]\n      });\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors';\n    } else {\n      this[kDispatcher] = init.dispatcher || input[kDispatcher];\n\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request);\n\n      // 8. Set request to input’s request.\n      request = input[kState];\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal];\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = environmentSettingsObject.settingsObject.origin;\n\n    // 8. Let window be \"client\".\n    let window = 'client';\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n      window = request.window;\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`);\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window';\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: environmentSettingsObject.settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    });\n    const initHasKey = Object.keys(init).length !== 0;\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin';\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false;\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false;\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client';\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client';\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = '';\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1];\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url];\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer;\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer';\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer;\n        try {\n          parsedReferrer = new URL(referrer, baseUrl);\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n            cause: err\n          });\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client' || origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl)) {\n          request.referrer = 'client';\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer;\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy;\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode;\n    if (init.mode !== undefined) {\n      mode = init.mode;\n    } else {\n      mode = fallbackMode;\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      });\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode;\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials;\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache;\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect;\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity);\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive);\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method;\n      const mayBeNormalized = normalizedMethodRecords[method];\n      if (mayBeNormalized !== undefined) {\n        // Note: Bypass validation DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH and these lowercase ones\n        request.method = mayBeNormalized;\n      } else {\n        // 2. If method is not a method or method is a forbidden method, then\n        // throw a TypeError.\n        if (!isValidHTTPToken(method)) {\n          throw new TypeError(`'${method}' is not a valid HTTP method.`);\n        }\n        const upperCase = method.toUpperCase();\n        if (forbiddenMethodsSet.has(upperCase)) {\n          throw new TypeError(`'${method}' HTTP method is unsupported.`);\n        }\n\n        // 3. Normalize method.\n        // https://fetch.spec.whatwg.org/#concept-method-normalize\n        // Note: must be in uppercase\n        method = normalizedMethodRecordsBase[upperCase] ?? method;\n\n        // 4. Set request’s method to method.\n        request.method = method;\n      }\n      if (!patchMethodWarning && request.method === 'patch') {\n        process.emitWarning('Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.', {\n          code: 'UNDICI-FETCH-patch'\n        });\n        patchMethodWarning = true;\n      }\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal;\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request;\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController();\n    this[kSignal] = ac.signal;\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n        throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n      }\n      if (signal.aborted) {\n        ac.abort(signal.reason);\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac;\n        const acRef = new WeakRef(ac);\n        const abort = buildAbort(acRef);\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(1500, signal);\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(1500, signal);\n          }\n        } catch {}\n        util.addAbortListener(signal, abort);\n        // The third argument must be a registry key to be unregistered.\n        // Without it, you cannot unregister.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n        // abort is used as the unregister key. (because it is unique)\n        requestFinalizer.register(ac, {\n          signal,\n          abort\n        }, abort);\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct);\n    setHeadersList(this[kHeaders], request.headersList);\n    setHeadersGuard(this[kHeaders], 'request');\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      setHeadersGuard(this[kHeaders], 'request-no-cors');\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = getHeadersList(this[kHeaders]);\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList);\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear();\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const {\n          name,\n          value\n        } of headers.rawValues()) {\n          headersList.append(name, value, false);\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies;\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers);\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null;\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if ((init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.');\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null;\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n      initBody = extractedBody;\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !getHeadersList(this[kHeaders]).contains('content-type', true)) {\n        this[kHeaders].append('content-type', contentType);\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody;\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.');\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true;\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody;\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (bodyUnusable(input)) {\n        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream();\n      inputBody.stream.pipeThrough(identityTransform);\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      };\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody;\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method() {\n    webidl.brandCheck(this, Request);\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method;\n  }\n\n  // Returns the URL of request as a string.\n  get url() {\n    webidl.brandCheck(this, Request);\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url);\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers() {\n    webidl.brandCheck(this, Request);\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination() {\n    webidl.brandCheck(this, Request);\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination;\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return '';\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client';\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString();\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy() {\n    webidl.brandCheck(this, Request);\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy;\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode() {\n    webidl.brandCheck(this, Request);\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode;\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials() {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials;\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache() {\n    webidl.brandCheck(this, Request);\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache;\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect() {\n    webidl.brandCheck(this, Request);\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect;\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity() {\n    webidl.brandCheck(this, Request);\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity;\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive() {\n    webidl.brandCheck(this, Request);\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive;\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation;\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-forward navigation).\n  get isHistoryNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation;\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal() {\n    webidl.brandCheck(this, Request);\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal];\n  }\n  get body() {\n    webidl.brandCheck(this, Request);\n    return this[kState].body ? this[kState].body.stream : null;\n  }\n  get bodyUsed() {\n    webidl.brandCheck(this, Request);\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n  }\n  get duplex() {\n    webidl.brandCheck(this, Request);\n    return 'half';\n  }\n\n  // Returns a clone of request.\n  clone() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (bodyUnusable(this)) {\n      throw new TypeError('unusable');\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState]);\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController();\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason);\n    } else {\n      let list = dependentControllerMap.get(this.signal);\n      if (list === undefined) {\n        list = new Set();\n        dependentControllerMap.set(this.signal, list);\n      }\n      const acRef = new WeakRef(ac);\n      list.add(acRef);\n      util.addAbortListener(ac.signal, buildAbort(acRef));\n    }\n\n    // 4. Return clonedRequestObject.\n    return fromInnerRequest(clonedRequest, ac.signal, getHeadersGuard(this[kHeaders]));\n  }\n  [nodeUtil.inspect.custom](depth, options) {\n    if (options.depth === null) {\n      options.depth = 2;\n    }\n    options.colors ??= true;\n    const properties = {\n      method: this.method,\n      url: this.url,\n      headers: this.headers,\n      destination: this.destination,\n      referrer: this.referrer,\n      referrerPolicy: this.referrerPolicy,\n      mode: this.mode,\n      credentials: this.credentials,\n      cache: this.cache,\n      redirect: this.redirect,\n      integrity: this.integrity,\n      keepalive: this.keepalive,\n      isReloadNavigation: this.isReloadNavigation,\n      isHistoryNavigation: this.isHistoryNavigation,\n      signal: this.signal\n    };\n    return `Request ${nodeUtil.formatWithOptions(options, properties)}`;\n  }\n}\nmixinBody(Request);\n\n// https://fetch.spec.whatwg.org/#requests\nfunction makeRequest(init) {\n  return {\n    method: init.method ?? 'GET',\n    localURLsOnly: init.localURLsOnly ?? false,\n    unsafeRequest: init.unsafeRequest ?? false,\n    body: init.body ?? null,\n    client: init.client ?? null,\n    reservedClient: init.reservedClient ?? null,\n    replacesClientId: init.replacesClientId ?? '',\n    window: init.window ?? 'client',\n    keepalive: init.keepalive ?? false,\n    serviceWorkers: init.serviceWorkers ?? 'all',\n    initiator: init.initiator ?? '',\n    destination: init.destination ?? '',\n    priority: init.priority ?? null,\n    origin: init.origin ?? 'client',\n    policyContainer: init.policyContainer ?? 'client',\n    referrer: init.referrer ?? 'client',\n    referrerPolicy: init.referrerPolicy ?? '',\n    mode: init.mode ?? 'no-cors',\n    useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,\n    credentials: init.credentials ?? 'same-origin',\n    useCredentials: init.useCredentials ?? false,\n    cache: init.cache ?? 'default',\n    redirect: init.redirect ?? 'follow',\n    integrity: init.integrity ?? '',\n    cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? '',\n    parserMetadata: init.parserMetadata ?? '',\n    reloadNavigation: init.reloadNavigation ?? false,\n    historyNavigation: init.historyNavigation ?? false,\n    userActivation: init.userActivation ?? false,\n    taintedOrigin: init.taintedOrigin ?? false,\n    redirectCount: init.redirectCount ?? 0,\n    responseTainting: init.responseTainting ?? 'basic',\n    preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,\n    done: init.done ?? false,\n    timingAllowFailed: init.timingAllowFailed ?? false,\n    urlList: init.urlList,\n    url: init.urlList[0],\n    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n  };\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({\n    ...request,\n    body: null\n  });\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(newRequest, request.body);\n  }\n\n  // 3. Return newRequest.\n  return newRequest;\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#request-create\n * @param {any} innerRequest\n * @param {AbortSignal} signal\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Request}\n */\nfunction fromInnerRequest(innerRequest, signal, guard) {\n  const request = new Request(kConstruct);\n  request[kState] = innerRequest;\n  request[kSignal] = signal;\n  request[kHeaders] = new Headers(kConstruct);\n  setHeadersList(request[kHeaders], innerRequest.headersList);\n  setHeadersGuard(request[kHeaders], guard);\n  return request;\n}\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V, prefix, argument) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V, prefix, argument);\n  }\n  if (V instanceof Request) {\n    return webidl.converters.Request(V, prefix, argument);\n  }\n  return webidl.converters.USVString(V, prefix, argument);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([{\n  key: 'method',\n  converter: webidl.converters.ByteString\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}, {\n  key: 'body',\n  converter: webidl.nullableConverter(webidl.converters.BodyInit)\n}, {\n  key: 'referrer',\n  converter: webidl.converters.USVString\n}, {\n  key: 'referrerPolicy',\n  converter: webidl.converters.DOMString,\n  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n  allowedValues: referrerPolicy\n}, {\n  key: 'mode',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#concept-request-mode\n  allowedValues: requestMode\n}, {\n  key: 'credentials',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcredentials\n  allowedValues: requestCredentials\n}, {\n  key: 'cache',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcache\n  allowedValues: requestCache\n}, {\n  key: 'redirect',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestredirect\n  allowedValues: requestRedirect\n}, {\n  key: 'integrity',\n  converter: webidl.converters.DOMString\n}, {\n  key: 'keepalive',\n  converter: webidl.converters.boolean\n}, {\n  key: 'signal',\n  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, 'RequestInit', 'signal', {\n    strict: false\n  }))\n}, {\n  key: 'window',\n  converter: webidl.converters.any\n}, {\n  key: 'duplex',\n  converter: webidl.converters.DOMString,\n  allowedValues: requestDuplex\n}, {\n  key: 'dispatcher',\n  // undici specific option\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  Request,\n  makeRequest,\n  fromInnerRequest,\n  cloneRequest\n};","map":{"version":3,"names":["extractBody","mixinBody","cloneBody","bodyUnusable","require","Headers","fill","fillHeaders","HeadersList","setHeadersGuard","getHeadersGuard","setHeadersList","getHeadersList","FinalizationRegistry","util","nodeUtil","isValidHTTPToken","sameOrigin","environmentSettingsObject","forbiddenMethodsSet","corsSafeListedMethodsSet","referrerPolicy","requestRedirect","requestMode","requestCredentials","requestCache","requestDuplex","kEnumerableProperty","normalizedMethodRecordsBase","normalizedMethodRecords","kHeaders","kSignal","kState","kDispatcher","webidl","URLSerializer","kConstruct","assert","getMaxListeners","setMaxListeners","getEventListeners","defaultMaxListeners","kAbortController","Symbol","requestFinalizer","signal","abort","removeEventListener","dependentControllerMap","WeakMap","buildAbort","acRef","ac","deref","undefined","unregister","reason","controllerList","get","size","ref","ctrl","clear","delete","patchMethodWarning","Request","constructor","input","init","prefix","argumentLengthCheck","arguments","converters","RequestInfo","RequestInit","request","fallbackMode","baseUrl","settingsObject","dispatcher","parsedURL","URL","err","TypeError","cause","username","password","makeRequest","urlList","origin","window","name","method","headersList","unsafeRequest","client","priority","referrer","mode","credentials","cache","redirect","integrity","keepalive","reloadNavigation","historyNavigation","initHasKey","Object","keys","length","url","parsedReferrer","protocol","hostname","errors","exception","header","message","String","Boolean","mayBeNormalized","upperCase","toUpperCase","has","process","emitWarning","code","AbortController","aborted","addEventListener","WeakRef","addAbortListener","register","headers","value","rawValues","append","cookies","inputBody","body","initBody","extractedBody","contentType","contains","inputOrInitBody","source","duplex","useCORSPreflightFlag","finalBody","identityTransform","TransformStream","stream","pipeThrough","readable","brandCheck","destination","toString","isReloadNavigation","isHistoryNavigation","bodyUsed","isDisturbed","clone","clonedRequest","cloneRequest","list","Set","set","add","fromInnerRequest","inspect","custom","depth","options","colors","properties","formatWithOptions","localURLsOnly","reservedClient","replacesClientId","serviceWorkers","initiator","policyContainer","useCredentials","cryptoGraphicsNonceMetadata","parserMetadata","userActivation","taintedOrigin","redirectCount","responseTainting","preventNoCacheCacheControlHeaderModification","done","timingAllowFailed","newRequest","innerRequest","guard","defineProperties","prototype","attribute","toStringTag","configurable","interfaceConverter","V","argument","USVString","AbortSignal","dictionaryConverter","key","converter","ByteString","HeadersInit","nullableConverter","BodyInit","DOMString","allowedValues","boolean","strict","any","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/web/fetch/request.js"],"sourcesContent":["/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody, bodyUnusable } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList, setHeadersGuard, getHeadersGuard, setHeadersList, getHeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('./dispatcher-weakref')()\nconst util = require('../../core/util')\nconst nodeUtil = require('node:util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  environmentSettingsObject\n} = require('./util')\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty, normalizedMethodRecordsBase, normalizedMethodRecords } = util\nconst { kHeaders, kSignal, kState, kDispatcher } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { URLSerializer } = require('./data-url')\nconst { kConstruct } = require('../../core/symbols')\nconst assert = require('node:assert')\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require('node:events')\n\nconst kAbortController = Symbol('abortController')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\nconst dependentControllerMap = new WeakMap()\n\nfunction buildAbort (acRef) {\n  return abort\n\n  function abort () {\n    const ac = acRef.deref()\n    if (ac !== undefined) {\n      // Currently, there is a problem with FinalizationRegistry.\n      // https://github.com/nodejs/node/issues/49344\n      // https://github.com/nodejs/node/issues/47748\n      // In the case of abort, the first step is to unregister from it.\n      // If the controller can refer to it, it is still registered.\n      // It will be removed in the future.\n      requestFinalizer.unregister(abort)\n\n      // Unsubscribe a listener.\n      // FinalizationRegistry will no longer be called, so this must be done.\n      this.removeEventListener('abort', abort)\n\n      ac.abort(this.reason)\n\n      const controllerList = dependentControllerMap.get(ac.signal)\n\n      if (controllerList !== undefined) {\n        if (controllerList.size !== 0) {\n          for (const ref of controllerList) {\n            const ctrl = ref.deref()\n            if (ctrl !== undefined) {\n              ctrl.abort(this.reason)\n            }\n          }\n          controllerList.clear()\n        }\n        dependentControllerMap.delete(ac.signal)\n      }\n    }\n  }\n}\n\nlet patchMethodWarning = false\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kConstruct) {\n      return\n    }\n\n    const prefix = 'Request constructor'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    input = webidl.converters.RequestInfo(input, prefix, 'input')\n    init = webidl.converters.RequestInit(init, prefix, 'init')\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = environmentSettingsObject.settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      this[kDispatcher] = init.dispatcher\n\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      this[kDispatcher] = init.dispatcher || input[kDispatcher]\n\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = environmentSettingsObject.settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: environmentSettingsObject.settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    const initHasKey = Object.keys(init).length !== 0\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (\n          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||\n          (origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl))\n        ) {\n          request.referrer = 'client'\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      const mayBeNormalized = normalizedMethodRecords[method]\n\n      if (mayBeNormalized !== undefined) {\n        // Note: Bypass validation DELETE, GET, HEAD, OPTIONS, POST, PUT, PATCH and these lowercase ones\n        request.method = mayBeNormalized\n      } else {\n        // 2. If method is not a method or method is a forbidden method, then\n        // throw a TypeError.\n        if (!isValidHTTPToken(method)) {\n          throw new TypeError(`'${method}' is not a valid HTTP method.`)\n        }\n\n        const upperCase = method.toUpperCase()\n\n        if (forbiddenMethodsSet.has(upperCase)) {\n          throw new TypeError(`'${method}' HTTP method is unsupported.`)\n        }\n\n        // 3. Normalize method.\n        // https://fetch.spec.whatwg.org/#concept-method-normalize\n        // Note: must be in uppercase\n        method = normalizedMethodRecordsBase[upperCase] ?? method\n\n        // 4. Set request’s method to method.\n        request.method = method\n      }\n\n      if (!patchMethodWarning && request.method === 'patch') {\n        process.emitWarning('Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.', {\n          code: 'UNDICI-FETCH-patch'\n        })\n\n        patchMethodWarning = true\n      }\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac\n\n        const acRef = new WeakRef(ac)\n        const abort = buildAbort(acRef)\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(1500, signal)\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(1500, signal)\n          }\n        } catch {}\n\n        util.addAbortListener(signal, abort)\n        // The third argument must be a registry key to be unregistered.\n        // Without it, you cannot unregister.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n        // abort is used as the unregister key. (because it is unique)\n        requestFinalizer.register(ac, { signal, abort }, abort)\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct)\n    setHeadersList(this[kHeaders], request.headersList)\n    setHeadersGuard(this[kHeaders], 'request')\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      setHeadersGuard(this[kHeaders], 'request-no-cors')\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = getHeadersList(this[kHeaders])\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const { name, value } of headers.rawValues()) {\n          headersList.append(name, value, false)\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      (init.body != null || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !getHeadersList(this[kHeaders]).contains('content-type', true)) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (bodyUnusable(input)) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-forward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (bodyUnusable(this)) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      let list = dependentControllerMap.get(this.signal)\n      if (list === undefined) {\n        list = new Set()\n        dependentControllerMap.set(this.signal, list)\n      }\n      const acRef = new WeakRef(ac)\n      list.add(acRef)\n      util.addAbortListener(\n        ac.signal,\n        buildAbort(acRef)\n      )\n    }\n\n    // 4. Return clonedRequestObject.\n    return fromInnerRequest(clonedRequest, ac.signal, getHeadersGuard(this[kHeaders]))\n  }\n\n  [nodeUtil.inspect.custom] (depth, options) {\n    if (options.depth === null) {\n      options.depth = 2\n    }\n\n    options.colors ??= true\n\n    const properties = {\n      method: this.method,\n      url: this.url,\n      headers: this.headers,\n      destination: this.destination,\n      referrer: this.referrer,\n      referrerPolicy: this.referrerPolicy,\n      mode: this.mode,\n      credentials: this.credentials,\n      cache: this.cache,\n      redirect: this.redirect,\n      integrity: this.integrity,\n      keepalive: this.keepalive,\n      isReloadNavigation: this.isReloadNavigation,\n      isHistoryNavigation: this.isHistoryNavigation,\n      signal: this.signal\n    }\n\n    return `Request ${nodeUtil.formatWithOptions(options, properties)}`\n  }\n}\n\nmixinBody(Request)\n\n// https://fetch.spec.whatwg.org/#requests\nfunction makeRequest (init) {\n  return {\n    method: init.method ?? 'GET',\n    localURLsOnly: init.localURLsOnly ?? false,\n    unsafeRequest: init.unsafeRequest ?? false,\n    body: init.body ?? null,\n    client: init.client ?? null,\n    reservedClient: init.reservedClient ?? null,\n    replacesClientId: init.replacesClientId ?? '',\n    window: init.window ?? 'client',\n    keepalive: init.keepalive ?? false,\n    serviceWorkers: init.serviceWorkers ?? 'all',\n    initiator: init.initiator ?? '',\n    destination: init.destination ?? '',\n    priority: init.priority ?? null,\n    origin: init.origin ?? 'client',\n    policyContainer: init.policyContainer ?? 'client',\n    referrer: init.referrer ?? 'client',\n    referrerPolicy: init.referrerPolicy ?? '',\n    mode: init.mode ?? 'no-cors',\n    useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,\n    credentials: init.credentials ?? 'same-origin',\n    useCredentials: init.useCredentials ?? false,\n    cache: init.cache ?? 'default',\n    redirect: init.redirect ?? 'follow',\n    integrity: init.integrity ?? '',\n    cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? '',\n    parserMetadata: init.parserMetadata ?? '',\n    reloadNavigation: init.reloadNavigation ?? false,\n    historyNavigation: init.historyNavigation ?? false,\n    userActivation: init.userActivation ?? false,\n    taintedOrigin: init.taintedOrigin ?? false,\n    redirectCount: init.redirectCount ?? 0,\n    responseTainting: init.responseTainting ?? 'basic',\n    preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,\n    done: init.done ?? false,\n    timingAllowFailed: init.timingAllowFailed ?? false,\n    urlList: init.urlList,\n    url: init.urlList[0],\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(newRequest, request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#request-create\n * @param {any} innerRequest\n * @param {AbortSignal} signal\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Request}\n */\nfunction fromInnerRequest (innerRequest, signal, guard) {\n  const request = new Request(kConstruct)\n  request[kState] = innerRequest\n  request[kSignal] = signal\n  request[kHeaders] = new Headers(kConstruct)\n  setHeadersList(request[kHeaders], innerRequest.headersList)\n  setHeadersGuard(request[kHeaders], guard)\n  return request\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V, prefix, argument) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V, prefix, argument)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V, prefix, argument)\n  }\n\n  return webidl.converters.USVString(V, prefix, argument)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        'RequestInit',\n        'signal',\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  },\n  {\n    key: 'dispatcher', // undici specific option\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = { Request, makeRequest, fromInnerRequest, cloneRequest }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}