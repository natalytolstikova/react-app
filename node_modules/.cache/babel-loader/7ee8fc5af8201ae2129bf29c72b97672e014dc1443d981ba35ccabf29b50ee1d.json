{"ast":null,"code":"'use strict';\n\nconst {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n} = require('./constants');\nclass TstNode {\n  /** @type {any} */\n  value = null;\n  /** @type {null | TstNode} */\n  left = null;\n  /** @type {null | TstNode} */\n  middle = null;\n  /** @type {null | TstNode} */\n  right = null;\n  /** @type {number} */\n  code;\n  /**\n   * @param {string} key\n   * @param {any} value\n   * @param {number} index\n   */\n  constructor(key, value, index) {\n    if (index === undefined || index >= key.length) {\n      throw new TypeError('Unreachable');\n    }\n    const code = this.code = key.charCodeAt(index);\n    // check code is ascii string\n    if (code > 0x7F) {\n      throw new TypeError('key must be ascii string');\n    }\n    if (key.length !== ++index) {\n      this.middle = new TstNode(key, value, index);\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  add(key, value) {\n    const length = key.length;\n    if (length === 0) {\n      throw new TypeError('Unreachable');\n    }\n    let index = 0;\n    let node = this;\n    while (true) {\n      const code = key.charCodeAt(index);\n      // check code is ascii string\n      if (code > 0x7F) {\n        throw new TypeError('key must be ascii string');\n      }\n      if (node.code === code) {\n        if (length === ++index) {\n          node.value = value;\n          break;\n        } else if (node.middle !== null) {\n          node = node.middle;\n        } else {\n          node.middle = new TstNode(key, value, index);\n          break;\n        }\n      } else if (node.code < code) {\n        if (node.left !== null) {\n          node = node.left;\n        } else {\n          node.left = new TstNode(key, value, index);\n          break;\n        }\n      } else if (node.right !== null) {\n        node = node.right;\n      } else {\n        node.right = new TstNode(key, value, index);\n        break;\n      }\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @return {TstNode | null}\n   */\n  search(key) {\n    const keylength = key.length;\n    let index = 0;\n    let node = this;\n    while (node !== null && index < keylength) {\n      let code = key[index];\n      // A-Z\n      // First check if it is bigger than 0x5a.\n      // Lowercase letters have higher char codes than uppercase ones.\n      // Also we assume that headers will mostly contain lowercase characters.\n      if (code <= 0x5a && code >= 0x41) {\n        // Lowercase for uppercase.\n        code |= 32;\n      }\n      while (node !== null) {\n        if (code === node.code) {\n          if (keylength === ++index) {\n            // Returns Node since it is the last key.\n            return node;\n          }\n          node = node.middle;\n          break;\n        }\n        node = node.code < code ? node.left : node.right;\n      }\n    }\n    return null;\n  }\n}\nclass TernarySearchTree {\n  /** @type {TstNode | null} */\n  node = null;\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   * */\n  insert(key, value) {\n    if (this.node === null) {\n      this.node = new TstNode(key, value, 0);\n    } else {\n      this.node.add(key, value);\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @return {any}\n   */\n  lookup(key) {\n    return this.node?.search(key)?.value ?? null;\n  }\n}\nconst tree = new TernarySearchTree();\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = headerNameLowerCasedRecord[wellknownHeaderNames[i]];\n  tree.insert(key, key);\n}\nmodule.exports = {\n  TernarySearchTree,\n  tree\n};","map":{"version":3,"names":["wellknownHeaderNames","headerNameLowerCasedRecord","require","TstNode","value","left","middle","right","code","constructor","key","index","undefined","length","TypeError","charCodeAt","add","node","search","keylength","TernarySearchTree","insert","lookup","tree","i","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/core/tree.js"],"sourcesContent":["'use strict'\n\nconst {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n} = require('./constants')\n\nclass TstNode {\n  /** @type {any} */\n  value = null\n  /** @type {null | TstNode} */\n  left = null\n  /** @type {null | TstNode} */\n  middle = null\n  /** @type {null | TstNode} */\n  right = null\n  /** @type {number} */\n  code\n  /**\n   * @param {string} key\n   * @param {any} value\n   * @param {number} index\n   */\n  constructor (key, value, index) {\n    if (index === undefined || index >= key.length) {\n      throw new TypeError('Unreachable')\n    }\n    const code = this.code = key.charCodeAt(index)\n    // check code is ascii string\n    if (code > 0x7F) {\n      throw new TypeError('key must be ascii string')\n    }\n    if (key.length !== ++index) {\n      this.middle = new TstNode(key, value, index)\n    } else {\n      this.value = value\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   */\n  add (key, value) {\n    const length = key.length\n    if (length === 0) {\n      throw new TypeError('Unreachable')\n    }\n    let index = 0\n    let node = this\n    while (true) {\n      const code = key.charCodeAt(index)\n      // check code is ascii string\n      if (code > 0x7F) {\n        throw new TypeError('key must be ascii string')\n      }\n      if (node.code === code) {\n        if (length === ++index) {\n          node.value = value\n          break\n        } else if (node.middle !== null) {\n          node = node.middle\n        } else {\n          node.middle = new TstNode(key, value, index)\n          break\n        }\n      } else if (node.code < code) {\n        if (node.left !== null) {\n          node = node.left\n        } else {\n          node.left = new TstNode(key, value, index)\n          break\n        }\n      } else if (node.right !== null) {\n        node = node.right\n      } else {\n        node.right = new TstNode(key, value, index)\n        break\n      }\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @return {TstNode | null}\n   */\n  search (key) {\n    const keylength = key.length\n    let index = 0\n    let node = this\n    while (node !== null && index < keylength) {\n      let code = key[index]\n      // A-Z\n      // First check if it is bigger than 0x5a.\n      // Lowercase letters have higher char codes than uppercase ones.\n      // Also we assume that headers will mostly contain lowercase characters.\n      if (code <= 0x5a && code >= 0x41) {\n        // Lowercase for uppercase.\n        code |= 32\n      }\n      while (node !== null) {\n        if (code === node.code) {\n          if (keylength === ++index) {\n            // Returns Node since it is the last key.\n            return node\n          }\n          node = node.middle\n          break\n        }\n        node = node.code < code ? node.left : node.right\n      }\n    }\n    return null\n  }\n}\n\nclass TernarySearchTree {\n  /** @type {TstNode | null} */\n  node = null\n\n  /**\n   * @param {string} key\n   * @param {any} value\n   * */\n  insert (key, value) {\n    if (this.node === null) {\n      this.node = new TstNode(key, value, 0)\n    } else {\n      this.node.add(key, value)\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @return {any}\n   */\n  lookup (key) {\n    return this.node?.search(key)?.value ?? null\n  }\n}\n\nconst tree = new TernarySearchTree()\n\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = headerNameLowerCasedRecord[wellknownHeaderNames[i]]\n  tree.insert(key, key)\n}\n\nmodule.exports = {\n  TernarySearchTree,\n  tree\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}