{"ast":null,"code":"'use strict';\n\nconst DispatcherBase = require('./dispatcher-base');\nconst {\n  kClose,\n  kDestroy,\n  kClosed,\n  kDestroyed,\n  kDispatch,\n  kNoProxyAgent,\n  kHttpProxyAgent,\n  kHttpsProxyAgent\n} = require('../core/symbols');\nconst ProxyAgent = require('./proxy-agent');\nconst Agent = require('./agent');\nconst DEFAULT_PORTS = {\n  'http:': 80,\n  'https:': 443\n};\nlet experimentalWarned = false;\nclass EnvHttpProxyAgent extends DispatcherBase {\n  #noProxyValue = null;\n  #noProxyEntries = null;\n  #opts = null;\n  constructor(opts = {}) {\n    super();\n    this.#opts = opts;\n    if (!experimentalWarned) {\n      experimentalWarned = true;\n      process.emitWarning('EnvHttpProxyAgent is experimental, expect them to change at any time.', {\n        code: 'UNDICI-EHPA'\n      });\n    }\n    const {\n      httpProxy,\n      httpsProxy,\n      noProxy,\n      ...agentOpts\n    } = opts;\n    this[kNoProxyAgent] = new Agent(agentOpts);\n    const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY;\n    if (HTTP_PROXY) {\n      this[kHttpProxyAgent] = new ProxyAgent({\n        ...agentOpts,\n        uri: HTTP_PROXY\n      });\n    } else {\n      this[kHttpProxyAgent] = this[kNoProxyAgent];\n    }\n    const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;\n    if (HTTPS_PROXY) {\n      this[kHttpsProxyAgent] = new ProxyAgent({\n        ...agentOpts,\n        uri: HTTPS_PROXY\n      });\n    } else {\n      this[kHttpsProxyAgent] = this[kHttpProxyAgent];\n    }\n    this.#parseNoProxy();\n  }\n  [kDispatch](opts, handler) {\n    const url = new URL(opts.origin);\n    const agent = this.#getProxyAgentForUrl(url);\n    return agent.dispatch(opts, handler);\n  }\n  async [kClose]() {\n    await this[kNoProxyAgent].close();\n    if (!this[kHttpProxyAgent][kClosed]) {\n      await this[kHttpProxyAgent].close();\n    }\n    if (!this[kHttpsProxyAgent][kClosed]) {\n      await this[kHttpsProxyAgent].close();\n    }\n  }\n  async [kDestroy](err) {\n    await this[kNoProxyAgent].destroy(err);\n    if (!this[kHttpProxyAgent][kDestroyed]) {\n      await this[kHttpProxyAgent].destroy(err);\n    }\n    if (!this[kHttpsProxyAgent][kDestroyed]) {\n      await this[kHttpsProxyAgent].destroy(err);\n    }\n  }\n  #getProxyAgentForUrl(url) {\n    let {\n      protocol,\n      host: hostname,\n      port\n    } = url;\n\n    // Stripping ports in this way instead of using parsedUrl.hostname to make\n    // sure that the brackets around IPv6 addresses are kept.\n    hostname = hostname.replace(/:\\d*$/, '').toLowerCase();\n    port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;\n    if (!this.#shouldProxy(hostname, port)) {\n      return this[kNoProxyAgent];\n    }\n    if (protocol === 'https:') {\n      return this[kHttpsProxyAgent];\n    }\n    return this[kHttpProxyAgent];\n  }\n  #shouldProxy(hostname, port) {\n    if (this.#noProxyChanged) {\n      this.#parseNoProxy();\n    }\n    if (this.#noProxyEntries.length === 0) {\n      return true; // Always proxy if NO_PROXY is not set or empty.\n    }\n    if (this.#noProxyValue === '*') {\n      return false; // Never proxy if wildcard is set.\n    }\n    for (let i = 0; i < this.#noProxyEntries.length; i++) {\n      const entry = this.#noProxyEntries[i];\n      if (entry.port && entry.port !== port) {\n        continue; // Skip if ports don't match.\n      }\n      if (!/^[.*]/.test(entry.hostname)) {\n        // No wildcards, so don't proxy only if there is not an exact match.\n        if (hostname === entry.hostname) {\n          return false;\n        }\n      } else {\n        // Don't proxy if the hostname ends with the no_proxy host.\n        if (hostname.endsWith(entry.hostname.replace(/^\\*/, ''))) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  #parseNoProxy() {\n    const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv;\n    const noProxySplit = noProxyValue.split(/[,\\s]/);\n    const noProxyEntries = [];\n    for (let i = 0; i < noProxySplit.length; i++) {\n      const entry = noProxySplit[i];\n      if (!entry) {\n        continue;\n      }\n      const parsed = entry.match(/^(.+):(\\d+)$/);\n      noProxyEntries.push({\n        hostname: (parsed ? parsed[1] : entry).toLowerCase(),\n        port: parsed ? Number.parseInt(parsed[2], 10) : 0\n      });\n    }\n    this.#noProxyValue = noProxyValue;\n    this.#noProxyEntries = noProxyEntries;\n  }\n  get #noProxyChanged() {\n    if (this.#opts.noProxy !== undefined) {\n      return false;\n    }\n    return this.#noProxyValue !== this.#noProxyEnv;\n  }\n  get #noProxyEnv() {\n    return process.env.no_proxy ?? process.env.NO_PROXY ?? '';\n  }\n}\nmodule.exports = EnvHttpProxyAgent;","map":{"version":3,"names":["DispatcherBase","require","kClose","kDestroy","kClosed","kDestroyed","kDispatch","kNoProxyAgent","kHttpProxyAgent","kHttpsProxyAgent","ProxyAgent","Agent","DEFAULT_PORTS","experimentalWarned","EnvHttpProxyAgent","noProxyValue","noProxyEntries","opts","constructor","process","emitWarning","code","httpProxy","httpsProxy","noProxy","agentOpts","HTTP_PROXY","env","http_proxy","uri","HTTPS_PROXY","https_proxy","parseNoProxy","handler","url","URL","origin","agent","getProxyAgentForUrl","dispatch","close","err","destroy","#getProxyAgentForUrl","protocol","host","hostname","port","replace","toLowerCase","Number","parseInt","shouldProxy","#shouldProxy","noProxyChanged","length","i","entry","test","endsWith","#parseNoProxy","noProxyEnv","noProxySplit","split","parsed","match","push","#noProxyChanged","undefined","#noProxyEnv","no_proxy","NO_PROXY","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/dispatcher/env-http-proxy-agent.js"],"sourcesContent":["'use strict'\n\nconst DispatcherBase = require('./dispatcher-base')\nconst { kClose, kDestroy, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = require('../core/symbols')\nconst ProxyAgent = require('./proxy-agent')\nconst Agent = require('./agent')\n\nconst DEFAULT_PORTS = {\n  'http:': 80,\n  'https:': 443\n}\n\nlet experimentalWarned = false\n\nclass EnvHttpProxyAgent extends DispatcherBase {\n  #noProxyValue = null\n  #noProxyEntries = null\n  #opts = null\n\n  constructor (opts = {}) {\n    super()\n    this.#opts = opts\n\n    if (!experimentalWarned) {\n      experimentalWarned = true\n      process.emitWarning('EnvHttpProxyAgent is experimental, expect them to change at any time.', {\n        code: 'UNDICI-EHPA'\n      })\n    }\n\n    const { httpProxy, httpsProxy, noProxy, ...agentOpts } = opts\n\n    this[kNoProxyAgent] = new Agent(agentOpts)\n\n    const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY\n    if (HTTP_PROXY) {\n      this[kHttpProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTP_PROXY })\n    } else {\n      this[kHttpProxyAgent] = this[kNoProxyAgent]\n    }\n\n    const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY\n    if (HTTPS_PROXY) {\n      this[kHttpsProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTPS_PROXY })\n    } else {\n      this[kHttpsProxyAgent] = this[kHttpProxyAgent]\n    }\n\n    this.#parseNoProxy()\n  }\n\n  [kDispatch] (opts, handler) {\n    const url = new URL(opts.origin)\n    const agent = this.#getProxyAgentForUrl(url)\n    return agent.dispatch(opts, handler)\n  }\n\n  async [kClose] () {\n    await this[kNoProxyAgent].close()\n    if (!this[kHttpProxyAgent][kClosed]) {\n      await this[kHttpProxyAgent].close()\n    }\n    if (!this[kHttpsProxyAgent][kClosed]) {\n      await this[kHttpsProxyAgent].close()\n    }\n  }\n\n  async [kDestroy] (err) {\n    await this[kNoProxyAgent].destroy(err)\n    if (!this[kHttpProxyAgent][kDestroyed]) {\n      await this[kHttpProxyAgent].destroy(err)\n    }\n    if (!this[kHttpsProxyAgent][kDestroyed]) {\n      await this[kHttpsProxyAgent].destroy(err)\n    }\n  }\n\n  #getProxyAgentForUrl (url) {\n    let { protocol, host: hostname, port } = url\n\n    // Stripping ports in this way instead of using parsedUrl.hostname to make\n    // sure that the brackets around IPv6 addresses are kept.\n    hostname = hostname.replace(/:\\d*$/, '').toLowerCase()\n    port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0\n    if (!this.#shouldProxy(hostname, port)) {\n      return this[kNoProxyAgent]\n    }\n    if (protocol === 'https:') {\n      return this[kHttpsProxyAgent]\n    }\n    return this[kHttpProxyAgent]\n  }\n\n  #shouldProxy (hostname, port) {\n    if (this.#noProxyChanged) {\n      this.#parseNoProxy()\n    }\n\n    if (this.#noProxyEntries.length === 0) {\n      return true // Always proxy if NO_PROXY is not set or empty.\n    }\n    if (this.#noProxyValue === '*') {\n      return false // Never proxy if wildcard is set.\n    }\n\n    for (let i = 0; i < this.#noProxyEntries.length; i++) {\n      const entry = this.#noProxyEntries[i]\n      if (entry.port && entry.port !== port) {\n        continue // Skip if ports don't match.\n      }\n      if (!/^[.*]/.test(entry.hostname)) {\n        // No wildcards, so don't proxy only if there is not an exact match.\n        if (hostname === entry.hostname) {\n          return false\n        }\n      } else {\n        // Don't proxy if the hostname ends with the no_proxy host.\n        if (hostname.endsWith(entry.hostname.replace(/^\\*/, ''))) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  #parseNoProxy () {\n    const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv\n    const noProxySplit = noProxyValue.split(/[,\\s]/)\n    const noProxyEntries = []\n\n    for (let i = 0; i < noProxySplit.length; i++) {\n      const entry = noProxySplit[i]\n      if (!entry) {\n        continue\n      }\n      const parsed = entry.match(/^(.+):(\\d+)$/)\n      noProxyEntries.push({\n        hostname: (parsed ? parsed[1] : entry).toLowerCase(),\n        port: parsed ? Number.parseInt(parsed[2], 10) : 0\n      })\n    }\n\n    this.#noProxyValue = noProxyValue\n    this.#noProxyEntries = noProxyEntries\n  }\n\n  get #noProxyChanged () {\n    if (this.#opts.noProxy !== undefined) {\n      return false\n    }\n    return this.#noProxyValue !== this.#noProxyEnv\n  }\n\n  get #noProxyEnv () {\n    return process.env.no_proxy ?? process.env.NO_PROXY ?? ''\n  }\n}\n\nmodule.exports = EnvHttpProxyAgent\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAM;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,UAAU;EAAEC,SAAS;EAAEC,aAAa;EAAEC,eAAe;EAAEC;AAAiB,CAAC,GAAGR,OAAO,CAAC,iBAAiB,CAAC;AACzI,MAAMS,UAAU,GAAGT,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMU,KAAK,GAAGV,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAMW,aAAa,GAAG;EACpB,OAAO,EAAE,EAAE;EACX,QAAQ,EAAE;AACZ,CAAC;AAED,IAAIC,kBAAkB,GAAG,KAAK;AAE9B,MAAMC,iBAAiB,SAASd,cAAc,CAAC;EAC7C,CAACe,YAAY,GAAG,IAAI;EACpB,CAACC,cAAc,GAAG,IAAI;EACtB,CAACC,IAAI,GAAG,IAAI;EAEZC,WAAWA,CAAED,IAAI,GAAG,CAAC,CAAC,EAAE;IACtB,KAAK,CAAC,CAAC;IACP,IAAI,CAAC,CAACA,IAAI,GAAGA,IAAI;IAEjB,IAAI,CAACJ,kBAAkB,EAAE;MACvBA,kBAAkB,GAAG,IAAI;MACzBM,OAAO,CAACC,WAAW,CAAC,uEAAuE,EAAE;QAC3FC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEC,SAAS;MAAEC,UAAU;MAAEC,OAAO;MAAE,GAAGC;IAAU,CAAC,GAAGR,IAAI;IAE7D,IAAI,CAACV,aAAa,CAAC,GAAG,IAAII,KAAK,CAACc,SAAS,CAAC;IAE1C,MAAMC,UAAU,GAAGJ,SAAS,IAAIH,OAAO,CAACQ,GAAG,CAACC,UAAU,IAAIT,OAAO,CAACQ,GAAG,CAACD,UAAU;IAChF,IAAIA,UAAU,EAAE;MACd,IAAI,CAAClB,eAAe,CAAC,GAAG,IAAIE,UAAU,CAAC;QAAE,GAAGe,SAAS;QAAEI,GAAG,EAAEH;MAAW,CAAC,CAAC;IAC3E,CAAC,MAAM;MACL,IAAI,CAAClB,eAAe,CAAC,GAAG,IAAI,CAACD,aAAa,CAAC;IAC7C;IAEA,MAAMuB,WAAW,GAAGP,UAAU,IAAIJ,OAAO,CAACQ,GAAG,CAACI,WAAW,IAAIZ,OAAO,CAACQ,GAAG,CAACG,WAAW;IACpF,IAAIA,WAAW,EAAE;MACf,IAAI,CAACrB,gBAAgB,CAAC,GAAG,IAAIC,UAAU,CAAC;QAAE,GAAGe,SAAS;QAAEI,GAAG,EAAEC;MAAY,CAAC,CAAC;IAC7E,CAAC,MAAM;MACL,IAAI,CAACrB,gBAAgB,CAAC,GAAG,IAAI,CAACD,eAAe,CAAC;IAChD;IAEA,IAAI,CAAC,CAACwB,YAAY,CAAC,CAAC;EACtB;EAEA,CAAC1B,SAAS,EAAGW,IAAI,EAAEgB,OAAO,EAAE;IAC1B,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAClB,IAAI,CAACmB,MAAM,CAAC;IAChC,MAAMC,KAAK,GAAG,IAAI,CAAC,CAACC,mBAAmB,CAACJ,GAAG,CAAC;IAC5C,OAAOG,KAAK,CAACE,QAAQ,CAACtB,IAAI,EAAEgB,OAAO,CAAC;EACtC;EAEA,OAAO/B,MAAM,IAAK;IAChB,MAAM,IAAI,CAACK,aAAa,CAAC,CAACiC,KAAK,CAAC,CAAC;IACjC,IAAI,CAAC,IAAI,CAAChC,eAAe,CAAC,CAACJ,OAAO,CAAC,EAAE;MACnC,MAAM,IAAI,CAACI,eAAe,CAAC,CAACgC,KAAK,CAAC,CAAC;IACrC;IACA,IAAI,CAAC,IAAI,CAAC/B,gBAAgB,CAAC,CAACL,OAAO,CAAC,EAAE;MACpC,MAAM,IAAI,CAACK,gBAAgB,CAAC,CAAC+B,KAAK,CAAC,CAAC;IACtC;EACF;EAEA,OAAOrC,QAAQ,EAAGsC,GAAG,EAAE;IACrB,MAAM,IAAI,CAAClC,aAAa,CAAC,CAACmC,OAAO,CAACD,GAAG,CAAC;IACtC,IAAI,CAAC,IAAI,CAACjC,eAAe,CAAC,CAACH,UAAU,CAAC,EAAE;MACtC,MAAM,IAAI,CAACG,eAAe,CAAC,CAACkC,OAAO,CAACD,GAAG,CAAC;IAC1C;IACA,IAAI,CAAC,IAAI,CAAChC,gBAAgB,CAAC,CAACJ,UAAU,CAAC,EAAE;MACvC,MAAM,IAAI,CAACI,gBAAgB,CAAC,CAACiC,OAAO,CAACD,GAAG,CAAC;IAC3C;EACF;EAEA,CAACH,mBAAmBK,CAAET,GAAG,EAAE;IACzB,IAAI;MAAEU,QAAQ;MAAEC,IAAI,EAAEC,QAAQ;MAAEC;IAAK,CAAC,GAAGb,GAAG;;IAE5C;IACA;IACAY,QAAQ,GAAGA,QAAQ,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;IACtDF,IAAI,GAAGG,MAAM,CAACC,QAAQ,CAACJ,IAAI,EAAE,EAAE,CAAC,IAAInC,aAAa,CAACgC,QAAQ,CAAC,IAAI,CAAC;IAChE,IAAI,CAAC,IAAI,CAAC,CAACQ,WAAW,CAACN,QAAQ,EAAEC,IAAI,CAAC,EAAE;MACtC,OAAO,IAAI,CAACxC,aAAa,CAAC;IAC5B;IACA,IAAIqC,QAAQ,KAAK,QAAQ,EAAE;MACzB,OAAO,IAAI,CAACnC,gBAAgB,CAAC;IAC/B;IACA,OAAO,IAAI,CAACD,eAAe,CAAC;EAC9B;EAEA,CAAC4C,WAAWC,CAAEP,QAAQ,EAAEC,IAAI,EAAE;IAC5B,IAAI,IAAI,CAAC,CAACO,cAAc,EAAE;MACxB,IAAI,CAAC,CAACtB,YAAY,CAAC,CAAC;IACtB;IAEA,IAAI,IAAI,CAAC,CAAChB,cAAc,CAACuC,MAAM,KAAK,CAAC,EAAE;MACrC,OAAO,IAAI,EAAC;IACd;IACA,IAAI,IAAI,CAAC,CAACxC,YAAY,KAAK,GAAG,EAAE;MAC9B,OAAO,KAAK,EAAC;IACf;IAEA,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC,CAACxC,cAAc,CAACuC,MAAM,EAAEC,CAAC,EAAE,EAAE;MACpD,MAAMC,KAAK,GAAG,IAAI,CAAC,CAACzC,cAAc,CAACwC,CAAC,CAAC;MACrC,IAAIC,KAAK,CAACV,IAAI,IAAIU,KAAK,CAACV,IAAI,KAAKA,IAAI,EAAE;QACrC,SAAQ,CAAC;MACX;MACA,IAAI,CAAC,OAAO,CAACW,IAAI,CAACD,KAAK,CAACX,QAAQ,CAAC,EAAE;QACjC;QACA,IAAIA,QAAQ,KAAKW,KAAK,CAACX,QAAQ,EAAE;UAC/B,OAAO,KAAK;QACd;MACF,CAAC,MAAM;QACL;QACA,IAAIA,QAAQ,CAACa,QAAQ,CAACF,KAAK,CAACX,QAAQ,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE;UACxD,OAAO,KAAK;QACd;MACF;IACF;IAEA,OAAO,IAAI;EACb;EAEA,CAAChB,YAAY4B,CAAA,EAAI;IACf,MAAM7C,YAAY,GAAG,IAAI,CAAC,CAACE,IAAI,CAACO,OAAO,IAAI,IAAI,CAAC,CAACqC,UAAU;IAC3D,MAAMC,YAAY,GAAG/C,YAAY,CAACgD,KAAK,CAAC,OAAO,CAAC;IAChD,MAAM/C,cAAc,GAAG,EAAE;IAEzB,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,YAAY,CAACP,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC5C,MAAMC,KAAK,GAAGK,YAAY,CAACN,CAAC,CAAC;MAC7B,IAAI,CAACC,KAAK,EAAE;QACV;MACF;MACA,MAAMO,MAAM,GAAGP,KAAK,CAACQ,KAAK,CAAC,cAAc,CAAC;MAC1CjD,cAAc,CAACkD,IAAI,CAAC;QAClBpB,QAAQ,EAAE,CAACkB,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAGP,KAAK,EAAER,WAAW,CAAC,CAAC;QACpDF,IAAI,EAAEiB,MAAM,GAAGd,MAAM,CAACC,QAAQ,CAACa,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG;MAClD,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC,CAACjD,YAAY,GAAGA,YAAY;IACjC,IAAI,CAAC,CAACC,cAAc,GAAGA,cAAc;EACvC;EAEA,IAAI,CAACsC,cAAca,CAAA,EAAI;IACrB,IAAI,IAAI,CAAC,CAAClD,IAAI,CAACO,OAAO,KAAK4C,SAAS,EAAE;MACpC,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAAC,CAACrD,YAAY,KAAK,IAAI,CAAC,CAAC8C,UAAU;EAChD;EAEA,IAAI,CAACA,UAAUQ,CAAA,EAAI;IACjB,OAAOlD,OAAO,CAACQ,GAAG,CAAC2C,QAAQ,IAAInD,OAAO,CAACQ,GAAG,CAAC4C,QAAQ,IAAI,EAAE;EAC3D;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG3D,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}