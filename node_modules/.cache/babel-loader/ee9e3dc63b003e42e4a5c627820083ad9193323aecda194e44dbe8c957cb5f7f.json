{"ast":null,"code":"'use strict';\n\nconst {\n  kConstruct\n} = require('./symbols');\nconst {\n  urlEquals,\n  getFieldValues\n} = require('./util');\nconst {\n  kEnumerableProperty,\n  isDisturbed\n} = require('../../core/util');\nconst {\n  webidl\n} = require('../fetch/webidl');\nconst {\n  Response,\n  cloneResponse,\n  fromInnerResponse\n} = require('../fetch/response');\nconst {\n  Request,\n  fromInnerRequest\n} = require('../fetch/request');\nconst {\n  kState\n} = require('../fetch/symbols');\nconst {\n  fetching\n} = require('../fetch/index');\nconst {\n  urlIsHttpHttpsScheme,\n  createDeferredPromise,\n  readAllBytes\n} = require('../fetch/util');\nconst assert = require('node:assert');\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */\n\nclass Cache {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */\n  #relevantRequestResponseList;\n  constructor() {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor();\n    }\n    this.#relevantRequestResponseList = arguments[1];\n  }\n  async match(request, options = {}) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.match';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n    const p = this.#internalMatchAll(request, options, 1);\n    if (p.length === 0) {\n      return;\n    }\n    return p[0];\n  }\n  async matchAll(request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.matchAll';\n    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n    return this.#internalMatchAll(request, options);\n  }\n  async add(request) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.add';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n\n    // 1.\n    const requests = [request];\n\n    // 2.\n    const responseArrayPromise = this.addAll(requests);\n\n    // 3.\n    return await responseArrayPromise;\n  }\n  async addAll(requests) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.addAll';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n\n    // 1.\n    const responsePromises = [];\n\n    // 2.\n    const requestList = [];\n\n    // 3.\n    for (let request of requests) {\n      if (request === undefined) {\n        throw webidl.errors.conversionFailed({\n          prefix,\n          argument: 'Argument 1',\n          types: ['undefined is not allowed']\n        });\n      }\n      request = webidl.converters.RequestInfo(request);\n      if (typeof request === 'string') {\n        continue;\n      }\n\n      // 3.1\n      const r = request[kState];\n\n      // 3.2\n      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: 'Expected http/s scheme when method is not GET.'\n        });\n      }\n    }\n\n    // 4.\n    /** @type {ReturnType<typeof fetching>[]} */\n    const fetchControllers = [];\n\n    // 5.\n    for (const request of requests) {\n      // 5.1\n      const r = new Request(request)[kState];\n\n      // 5.2\n      if (!urlIsHttpHttpsScheme(r.url)) {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: 'Expected http/s scheme.'\n        });\n      }\n\n      // 5.4\n      r.initiator = 'fetch';\n      r.destination = 'subresource';\n\n      // 5.5\n      requestList.push(r);\n\n      // 5.6\n      const responsePromise = createDeferredPromise();\n\n      // 5.7\n      fetchControllers.push(fetching({\n        request: r,\n        processResponse(response) {\n          // 1.\n          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n            responsePromise.reject(webidl.errors.exception({\n              header: 'Cache.addAll',\n              message: 'Received an invalid status code or the request failed.'\n            }));\n          } else if (response.headersList.contains('vary')) {\n            // 2.\n            // 2.1\n            const fieldValues = getFieldValues(response.headersList.get('vary'));\n\n            // 2.2\n            for (const fieldValue of fieldValues) {\n              // 2.2.1\n              if (fieldValue === '*') {\n                responsePromise.reject(webidl.errors.exception({\n                  header: 'Cache.addAll',\n                  message: 'invalid vary field value'\n                }));\n                for (const controller of fetchControllers) {\n                  controller.abort();\n                }\n                return;\n              }\n            }\n          }\n        },\n        processResponseEndOfBody(response) {\n          // 1.\n          if (response.aborted) {\n            responsePromise.reject(new DOMException('aborted', 'AbortError'));\n            return;\n          }\n\n          // 2.\n          responsePromise.resolve(response);\n        }\n      }));\n\n      // 5.8\n      responsePromises.push(responsePromise.promise);\n    }\n\n    // 6.\n    const p = Promise.all(responsePromises);\n\n    // 7.\n    const responses = await p;\n\n    // 7.1\n    const operations = [];\n\n    // 7.2\n    let index = 0;\n\n    // 7.3\n    for (const response of responses) {\n      // 7.3.1\n      /** @type {CacheBatchOperation} */\n      const operation = {\n        type: 'put',\n        // 7.3.2\n        request: requestList[index],\n        // 7.3.3\n        response // 7.3.4\n      };\n      operations.push(operation); // 7.3.5\n\n      index++; // 7.3.6\n    }\n\n    // 7.5\n    const cacheJobPromise = createDeferredPromise();\n\n    // 7.6.1\n    let errorData = null;\n\n    // 7.6.2\n    try {\n      this.#batchCacheOperations(operations);\n    } catch (e) {\n      errorData = e;\n    }\n\n    // 7.6.3\n    queueMicrotask(() => {\n      // 7.6.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve(undefined);\n      } else {\n        // 7.6.3.2\n        cacheJobPromise.reject(errorData);\n      }\n    });\n\n    // 7.7\n    return cacheJobPromise.promise;\n  }\n  async put(request, response) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.put';\n    webidl.argumentLengthCheck(arguments, 2, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n    response = webidl.converters.Response(response, prefix, 'response');\n\n    // 1.\n    let innerRequest = null;\n\n    // 2.\n    if (request instanceof Request) {\n      innerRequest = request[kState];\n    } else {\n      // 3.\n      innerRequest = new Request(request)[kState];\n    }\n\n    // 4.\n    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Expected an http/s scheme when method is not GET'\n      });\n    }\n\n    // 5.\n    const innerResponse = response[kState];\n\n    // 6.\n    if (innerResponse.status === 206) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Got 206 status'\n      });\n    }\n\n    // 7.\n    if (innerResponse.headersList.contains('vary')) {\n      // 7.1.\n      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'));\n\n      // 7.2.\n      for (const fieldValue of fieldValues) {\n        // 7.2.1\n        if (fieldValue === '*') {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: 'Got * vary field value'\n          });\n        }\n      }\n    }\n\n    // 8.\n    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Response body is locked or disturbed'\n      });\n    }\n\n    // 9.\n    const clonedResponse = cloneResponse(innerResponse);\n\n    // 10.\n    const bodyReadPromise = createDeferredPromise();\n\n    // 11.\n    if (innerResponse.body != null) {\n      // 11.1\n      const stream = innerResponse.body.stream;\n\n      // 11.2\n      const reader = stream.getReader();\n\n      // 11.3\n      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);\n    } else {\n      bodyReadPromise.resolve(undefined);\n    }\n\n    // 12.\n    /** @type {CacheBatchOperation[]} */\n    const operations = [];\n\n    // 13.\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'put',\n      // 14.\n      request: innerRequest,\n      // 15.\n      response: clonedResponse // 16.\n    };\n\n    // 17.\n    operations.push(operation);\n\n    // 19.\n    const bytes = await bodyReadPromise.promise;\n    if (clonedResponse.body != null) {\n      clonedResponse.body.source = bytes;\n    }\n\n    // 19.1\n    const cacheJobPromise = createDeferredPromise();\n\n    // 19.2.1\n    let errorData = null;\n\n    // 19.2.2\n    try {\n      this.#batchCacheOperations(operations);\n    } catch (e) {\n      errorData = e;\n    }\n\n    // 19.2.3\n    queueMicrotask(() => {\n      // 19.2.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve();\n      } else {\n        // 19.2.3.2\n        cacheJobPromise.reject(errorData);\n      }\n    });\n    return cacheJobPromise.promise;\n  }\n  async delete(request, options = {}) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.delete';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n\n    /**\n     * @type {Request}\n     */\n    let r = null;\n    if (request instanceof Request) {\n      r = request[kState];\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return false;\n      }\n    } else {\n      assert(typeof request === 'string');\n      r = new Request(request)[kState];\n    }\n\n    /** @type {CacheBatchOperation[]} */\n    const operations = [];\n\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'delete',\n      request: r,\n      options\n    };\n    operations.push(operation);\n    const cacheJobPromise = createDeferredPromise();\n    let errorData = null;\n    let requestResponses;\n    try {\n      requestResponses = this.#batchCacheOperations(operations);\n    } catch (e) {\n      errorData = e;\n    }\n    queueMicrotask(() => {\n      if (errorData === null) {\n        cacheJobPromise.resolve(!!requestResponses?.length);\n      } else {\n        cacheJobPromise.reject(errorData);\n      }\n    });\n    return cacheJobPromise.promise;\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {Promise<readonly Request[]>}\n   */\n  async keys(request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache);\n    const prefix = 'Cache.keys';\n    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request');\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options');\n\n    // 1.\n    let r = null;\n\n    // 2.\n    if (request !== undefined) {\n      // 2.1\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState];\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return [];\n        }\n      } else if (typeof request === 'string') {\n        // 2.2\n        r = new Request(request)[kState];\n      }\n    }\n\n    // 4.\n    const promise = createDeferredPromise();\n\n    // 5.\n    // 5.1\n    const requests = [];\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        // 5.2.1.1\n        requests.push(requestResponse[0]);\n      }\n    } else {\n      // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options);\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        // 5.3.2.1\n        requests.push(requestResponse[0]);\n      }\n    }\n\n    // 5.4\n    queueMicrotask(() => {\n      // 5.4.1\n      const requestList = [];\n\n      // 5.4.2\n      for (const request of requests) {\n        const requestObject = fromInnerRequest(request, new AbortController().signal, 'immutable');\n        // 5.4.2.1\n        requestList.push(requestObject);\n      }\n\n      // 5.4.3\n      promise.resolve(Object.freeze(requestList));\n    });\n    return promise.promise;\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */\n  #batchCacheOperations(operations) {\n    // 1.\n    const cache = this.#relevantRequestResponseList;\n\n    // 2.\n    const backupCache = [...cache];\n\n    // 3.\n    const addedItems = [];\n\n    // 4.1\n    const resultList = [];\n    try {\n      // 4.2\n      for (const operation of operations) {\n        // 4.2.1\n        if (operation.type !== 'delete' && operation.type !== 'put') {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'operation type does not match \"delete\" or \"put\"'\n          });\n        }\n\n        // 4.2.2\n        if (operation.type === 'delete' && operation.response != null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'delete operation should not have an associated response'\n          });\n        }\n\n        // 4.2.3\n        if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n          throw new DOMException('???', 'InvalidStateError');\n        }\n\n        // 4.2.4\n        let requestResponses;\n\n        // 4.2.5\n        if (operation.type === 'delete') {\n          // 4.2.5.1\n          requestResponses = this.#queryCache(operation.request, operation.options);\n\n          // TODO: the spec is wrong, this is needed to pass WPTs\n          if (requestResponses.length === 0) {\n            return [];\n          }\n\n          // 4.2.5.2\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse);\n            assert(idx !== -1);\n\n            // 4.2.5.2.1\n            cache.splice(idx, 1);\n          }\n        } else if (operation.type === 'put') {\n          // 4.2.6\n          // 4.2.6.1\n          if (operation.response == null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'put operation should have an associated response'\n            });\n          }\n\n          // 4.2.6.2\n          const r = operation.request;\n\n          // 4.2.6.3\n          if (!urlIsHttpHttpsScheme(r.url)) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'expected http or https scheme'\n            });\n          }\n\n          // 4.2.6.4\n          if (r.method !== 'GET') {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'not get method'\n            });\n          }\n\n          // 4.2.6.5\n          if (operation.options != null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'options must not be defined'\n            });\n          }\n\n          // 4.2.6.6\n          requestResponses = this.#queryCache(operation.request);\n\n          // 4.2.6.7\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse);\n            assert(idx !== -1);\n\n            // 4.2.6.7.1\n            cache.splice(idx, 1);\n          }\n\n          // 4.2.6.8\n          cache.push([operation.request, operation.response]);\n\n          // 4.2.6.10\n          addedItems.push([operation.request, operation.response]);\n        }\n\n        // 4.2.7\n        resultList.push([operation.request, operation.response]);\n      }\n\n      // 4.3\n      return resultList;\n    } catch (e) {\n      // 5.\n      // 5.1\n      this.#relevantRequestResponseList.length = 0;\n\n      // 5.2\n      this.#relevantRequestResponseList = backupCache;\n\n      // 5.3\n      throw e;\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */\n  #queryCache(requestQuery, options, targetStorage) {\n    /** @type {requestResponseList} */\n    const resultList = [];\n    const storage = targetStorage ?? this.#relevantRequestResponseList;\n    for (const requestResponse of storage) {\n      const [cachedRequest, cachedResponse] = requestResponse;\n      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n        resultList.push(requestResponse);\n      }\n    }\n    return resultList;\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */\n  #requestMatchesCachedItem(requestQuery, request, response = null, options) {\n    // if (options?.ignoreMethod === false && request.method === 'GET') {\n    //   return false\n    // }\n\n    const queryURL = new URL(requestQuery.url);\n    const cachedURL = new URL(request.url);\n    if (options?.ignoreSearch) {\n      cachedURL.search = '';\n      queryURL.search = '';\n    }\n    if (!urlEquals(queryURL, cachedURL, true)) {\n      return false;\n    }\n    if (response == null || options?.ignoreVary || !response.headersList.contains('vary')) {\n      return true;\n    }\n    const fieldValues = getFieldValues(response.headersList.get('vary'));\n    for (const fieldValue of fieldValues) {\n      if (fieldValue === '*') {\n        return false;\n      }\n      const requestValue = request.headersList.get(fieldValue);\n      const queryValue = requestQuery.headersList.get(fieldValue);\n\n      // If one has the header and the other doesn't, or one has\n      // a different value than the other, return false\n      if (requestValue !== queryValue) {\n        return false;\n      }\n    }\n    return true;\n  }\n  #internalMatchAll(request, options, maxResponses = Infinity) {\n    // 1.\n    let r = null;\n\n    // 2.\n    if (request !== undefined) {\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState];\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return [];\n        }\n      } else if (typeof request === 'string') {\n        // 2.2.1\n        r = new Request(request)[kState];\n      }\n    }\n\n    // 5.\n    // 5.1\n    const responses = [];\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        responses.push(requestResponse[1]);\n      }\n    } else {\n      // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options);\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        responses.push(requestResponse[1]);\n      }\n    }\n\n    // 5.4\n    // We don't implement CORs so we don't need to loop over the responses, yay!\n\n    // 5.5.1\n    const responseList = [];\n\n    // 5.5.2\n    for (const response of responses) {\n      // 5.5.2.1\n      const responseObject = fromInnerResponse(response, 'immutable');\n      responseList.push(responseObject.clone());\n      if (responseList.length >= maxResponses) {\n        break;\n      }\n    }\n\n    // 6.\n    return Object.freeze(responseList);\n  }\n}\nObject.defineProperties(Cache.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'Cache',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  matchAll: kEnumerableProperty,\n  add: kEnumerableProperty,\n  addAll: kEnumerableProperty,\n  put: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n});\nconst cacheQueryOptionConverters = [{\n  key: 'ignoreSearch',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'ignoreMethod',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'ignoreVary',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}];\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([...cacheQueryOptionConverters, {\n  key: 'cacheName',\n  converter: webidl.converters.DOMString\n}]);\nwebidl.converters.Response = webidl.interfaceConverter(Response);\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(webidl.converters.RequestInfo);\nmodule.exports = {\n  Cache\n};","map":{"version":3,"names":["kConstruct","require","urlEquals","getFieldValues","kEnumerableProperty","isDisturbed","webidl","Response","cloneResponse","fromInnerResponse","Request","fromInnerRequest","kState","fetching","urlIsHttpHttpsScheme","createDeferredPromise","readAllBytes","assert","Cache","relevantRequestResponseList","constructor","arguments","illegalConstructor","match","request","options","brandCheck","prefix","argumentLengthCheck","converters","RequestInfo","CacheQueryOptions","p","internalMatchAll","length","matchAll","undefined","add","requests","responseArrayPromise","addAll","responsePromises","requestList","errors","conversionFailed","argument","types","r","url","method","exception","header","message","fetchControllers","initiator","destination","push","responsePromise","processResponse","response","type","status","reject","headersList","contains","fieldValues","get","fieldValue","controller","abort","processResponseEndOfBody","aborted","DOMException","resolve","promise","Promise","all","responses","operations","index","operation","cacheJobPromise","errorData","batchCacheOperations","e","queueMicrotask","put","innerRequest","innerResponse","body","stream","locked","clonedResponse","bodyReadPromise","reader","getReader","then","bytes","source","delete","ignoreMethod","requestResponses","keys","requestResponse","queryCache","requestObject","AbortController","signal","Object","freeze","#batchCacheOperations","cache","backupCache","addedItems","resultList","idx","indexOf","splice","#queryCache","requestQuery","targetStorage","storage","cachedRequest","cachedResponse","requestMatchesCachedItem","#requestMatchesCachedItem","queryURL","URL","cachedURL","ignoreSearch","search","ignoreVary","requestValue","queryValue","#internalMatchAll","maxResponses","Infinity","responseList","responseObject","clone","defineProperties","prototype","Symbol","toStringTag","value","configurable","cacheQueryOptionConverters","key","converter","boolean","defaultValue","dictionaryConverter","MultiCacheQueryOptions","DOMString","interfaceConverter","sequenceConverter","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/web/cache/cache.js"],"sourcesContent":["'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { urlEquals, getFieldValues } = require('./util')\nconst { kEnumerableProperty, isDisturbed } = require('../../core/util')\nconst { webidl } = require('../fetch/webidl')\nconst { Response, cloneResponse, fromInnerResponse } = require('../fetch/response')\nconst { Request, fromInnerRequest } = require('../fetch/request')\nconst { kState } = require('../fetch/symbols')\nconst { fetching } = require('../fetch/index')\nconst { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require('../fetch/util')\nconst assert = require('node:assert')\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */\n\nclass Cache {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */\n  #relevantRequestResponseList\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n\n    this.#relevantRequestResponseList = arguments[1]\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.match'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    request = webidl.converters.RequestInfo(request, prefix, 'request')\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options')\n\n    const p = this.#internalMatchAll(request, options, 1)\n\n    if (p.length === 0) {\n      return\n    }\n\n    return p[0]\n  }\n\n  async matchAll (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.matchAll'\n    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request')\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options')\n\n    return this.#internalMatchAll(request, options)\n  }\n\n  async add (request) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.add'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    request = webidl.converters.RequestInfo(request, prefix, 'request')\n\n    // 1.\n    const requests = [request]\n\n    // 2.\n    const responseArrayPromise = this.addAll(requests)\n\n    // 3.\n    return await responseArrayPromise\n  }\n\n  async addAll (requests) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.addAll'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    // 1.\n    const responsePromises = []\n\n    // 2.\n    const requestList = []\n\n    // 3.\n    for (let request of requests) {\n      if (request === undefined) {\n        throw webidl.errors.conversionFailed({\n          prefix,\n          argument: 'Argument 1',\n          types: ['undefined is not allowed']\n        })\n      }\n\n      request = webidl.converters.RequestInfo(request)\n\n      if (typeof request === 'string') {\n        continue\n      }\n\n      // 3.1\n      const r = request[kState]\n\n      // 3.2\n      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: 'Expected http/s scheme when method is not GET.'\n        })\n      }\n    }\n\n    // 4.\n    /** @type {ReturnType<typeof fetching>[]} */\n    const fetchControllers = []\n\n    // 5.\n    for (const request of requests) {\n      // 5.1\n      const r = new Request(request)[kState]\n\n      // 5.2\n      if (!urlIsHttpHttpsScheme(r.url)) {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: 'Expected http/s scheme.'\n        })\n      }\n\n      // 5.4\n      r.initiator = 'fetch'\n      r.destination = 'subresource'\n\n      // 5.5\n      requestList.push(r)\n\n      // 5.6\n      const responsePromise = createDeferredPromise()\n\n      // 5.7\n      fetchControllers.push(fetching({\n        request: r,\n        processResponse (response) {\n          // 1.\n          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n            responsePromise.reject(webidl.errors.exception({\n              header: 'Cache.addAll',\n              message: 'Received an invalid status code or the request failed.'\n            }))\n          } else if (response.headersList.contains('vary')) { // 2.\n            // 2.1\n            const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n            // 2.2\n            for (const fieldValue of fieldValues) {\n              // 2.2.1\n              if (fieldValue === '*') {\n                responsePromise.reject(webidl.errors.exception({\n                  header: 'Cache.addAll',\n                  message: 'invalid vary field value'\n                }))\n\n                for (const controller of fetchControllers) {\n                  controller.abort()\n                }\n\n                return\n              }\n            }\n          }\n        },\n        processResponseEndOfBody (response) {\n          // 1.\n          if (response.aborted) {\n            responsePromise.reject(new DOMException('aborted', 'AbortError'))\n            return\n          }\n\n          // 2.\n          responsePromise.resolve(response)\n        }\n      }))\n\n      // 5.8\n      responsePromises.push(responsePromise.promise)\n    }\n\n    // 6.\n    const p = Promise.all(responsePromises)\n\n    // 7.\n    const responses = await p\n\n    // 7.1\n    const operations = []\n\n    // 7.2\n    let index = 0\n\n    // 7.3\n    for (const response of responses) {\n      // 7.3.1\n      /** @type {CacheBatchOperation} */\n      const operation = {\n        type: 'put', // 7.3.2\n        request: requestList[index], // 7.3.3\n        response // 7.3.4\n      }\n\n      operations.push(operation) // 7.3.5\n\n      index++ // 7.3.6\n    }\n\n    // 7.5\n    const cacheJobPromise = createDeferredPromise()\n\n    // 7.6.1\n    let errorData = null\n\n    // 7.6.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 7.6.3\n    queueMicrotask(() => {\n      // 7.6.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve(undefined)\n      } else {\n        // 7.6.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    // 7.7\n    return cacheJobPromise.promise\n  }\n\n  async put (request, response) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.put'\n    webidl.argumentLengthCheck(arguments, 2, prefix)\n\n    request = webidl.converters.RequestInfo(request, prefix, 'request')\n    response = webidl.converters.Response(response, prefix, 'response')\n\n    // 1.\n    let innerRequest = null\n\n    // 2.\n    if (request instanceof Request) {\n      innerRequest = request[kState]\n    } else { // 3.\n      innerRequest = new Request(request)[kState]\n    }\n\n    // 4.\n    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Expected an http/s scheme when method is not GET'\n      })\n    }\n\n    // 5.\n    const innerResponse = response[kState]\n\n    // 6.\n    if (innerResponse.status === 206) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Got 206 status'\n      })\n    }\n\n    // 7.\n    if (innerResponse.headersList.contains('vary')) {\n      // 7.1.\n      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))\n\n      // 7.2.\n      for (const fieldValue of fieldValues) {\n        // 7.2.1\n        if (fieldValue === '*') {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: 'Got * vary field value'\n          })\n        }\n      }\n    }\n\n    // 8.\n    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n      throw webidl.errors.exception({\n        header: prefix,\n        message: 'Response body is locked or disturbed'\n      })\n    }\n\n    // 9.\n    const clonedResponse = cloneResponse(innerResponse)\n\n    // 10.\n    const bodyReadPromise = createDeferredPromise()\n\n    // 11.\n    if (innerResponse.body != null) {\n      // 11.1\n      const stream = innerResponse.body.stream\n\n      // 11.2\n      const reader = stream.getReader()\n\n      // 11.3\n      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)\n    } else {\n      bodyReadPromise.resolve(undefined)\n    }\n\n    // 12.\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    // 13.\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'put', // 14.\n      request: innerRequest, // 15.\n      response: clonedResponse // 16.\n    }\n\n    // 17.\n    operations.push(operation)\n\n    // 19.\n    const bytes = await bodyReadPromise.promise\n\n    if (clonedResponse.body != null) {\n      clonedResponse.body.source = bytes\n    }\n\n    // 19.1\n    const cacheJobPromise = createDeferredPromise()\n\n    // 19.2.1\n    let errorData = null\n\n    // 19.2.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 19.2.3\n    queueMicrotask(() => {\n      // 19.2.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve()\n      } else { // 19.2.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  async delete (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.delete'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    request = webidl.converters.RequestInfo(request, prefix, 'request')\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options')\n\n    /**\n     * @type {Request}\n     */\n    let r = null\n\n    if (request instanceof Request) {\n      r = request[kState]\n\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return false\n      }\n    } else {\n      assert(typeof request === 'string')\n\n      r = new Request(request)[kState]\n    }\n\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'delete',\n      request: r,\n      options\n    }\n\n    operations.push(operation)\n\n    const cacheJobPromise = createDeferredPromise()\n\n    let errorData = null\n    let requestResponses\n\n    try {\n      requestResponses = this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    queueMicrotask(() => {\n      if (errorData === null) {\n        cacheJobPromise.resolve(!!requestResponses?.length)\n      } else {\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {Promise<readonly Request[]>}\n   */\n  async keys (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    const prefix = 'Cache.keys'\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request, prefix, 'request')\n    options = webidl.converters.CacheQueryOptions(options, prefix, 'options')\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      // 2.1\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') { // 2.2\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 4.\n    const promise = createDeferredPromise()\n\n    // 5.\n    // 5.1\n    const requests = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        // 5.2.1.1\n        requests.push(requestResponse[0])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        // 5.3.2.1\n        requests.push(requestResponse[0])\n      }\n    }\n\n    // 5.4\n    queueMicrotask(() => {\n      // 5.4.1\n      const requestList = []\n\n      // 5.4.2\n      for (const request of requests) {\n        const requestObject = fromInnerRequest(\n          request,\n          new AbortController().signal,\n          'immutable'\n        )\n        // 5.4.2.1\n        requestList.push(requestObject)\n      }\n\n      // 5.4.3\n      promise.resolve(Object.freeze(requestList))\n    })\n\n    return promise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */\n  #batchCacheOperations (operations) {\n    // 1.\n    const cache = this.#relevantRequestResponseList\n\n    // 2.\n    const backupCache = [...cache]\n\n    // 3.\n    const addedItems = []\n\n    // 4.1\n    const resultList = []\n\n    try {\n      // 4.2\n      for (const operation of operations) {\n        // 4.2.1\n        if (operation.type !== 'delete' && operation.type !== 'put') {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'operation type does not match \"delete\" or \"put\"'\n          })\n        }\n\n        // 4.2.2\n        if (operation.type === 'delete' && operation.response != null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'delete operation should not have an associated response'\n          })\n        }\n\n        // 4.2.3\n        if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n          throw new DOMException('???', 'InvalidStateError')\n        }\n\n        // 4.2.4\n        let requestResponses\n\n        // 4.2.5\n        if (operation.type === 'delete') {\n          // 4.2.5.1\n          requestResponses = this.#queryCache(operation.request, operation.options)\n\n          // TODO: the spec is wrong, this is needed to pass WPTs\n          if (requestResponses.length === 0) {\n            return []\n          }\n\n          // 4.2.5.2\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.5.2.1\n            cache.splice(idx, 1)\n          }\n        } else if (operation.type === 'put') { // 4.2.6\n          // 4.2.6.1\n          if (operation.response == null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'put operation should have an associated response'\n            })\n          }\n\n          // 4.2.6.2\n          const r = operation.request\n\n          // 4.2.6.3\n          if (!urlIsHttpHttpsScheme(r.url)) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'expected http or https scheme'\n            })\n          }\n\n          // 4.2.6.4\n          if (r.method !== 'GET') {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'not get method'\n            })\n          }\n\n          // 4.2.6.5\n          if (operation.options != null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'options must not be defined'\n            })\n          }\n\n          // 4.2.6.6\n          requestResponses = this.#queryCache(operation.request)\n\n          // 4.2.6.7\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.6.7.1\n            cache.splice(idx, 1)\n          }\n\n          // 4.2.6.8\n          cache.push([operation.request, operation.response])\n\n          // 4.2.6.10\n          addedItems.push([operation.request, operation.response])\n        }\n\n        // 4.2.7\n        resultList.push([operation.request, operation.response])\n      }\n\n      // 4.3\n      return resultList\n    } catch (e) { // 5.\n      // 5.1\n      this.#relevantRequestResponseList.length = 0\n\n      // 5.2\n      this.#relevantRequestResponseList = backupCache\n\n      // 5.3\n      throw e\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */\n  #queryCache (requestQuery, options, targetStorage) {\n    /** @type {requestResponseList} */\n    const resultList = []\n\n    const storage = targetStorage ?? this.#relevantRequestResponseList\n\n    for (const requestResponse of storage) {\n      const [cachedRequest, cachedResponse] = requestResponse\n      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n        resultList.push(requestResponse)\n      }\n    }\n\n    return resultList\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */\n  #requestMatchesCachedItem (requestQuery, request, response = null, options) {\n    // if (options?.ignoreMethod === false && request.method === 'GET') {\n    //   return false\n    // }\n\n    const queryURL = new URL(requestQuery.url)\n\n    const cachedURL = new URL(request.url)\n\n    if (options?.ignoreSearch) {\n      cachedURL.search = ''\n\n      queryURL.search = ''\n    }\n\n    if (!urlEquals(queryURL, cachedURL, true)) {\n      return false\n    }\n\n    if (\n      response == null ||\n      options?.ignoreVary ||\n      !response.headersList.contains('vary')\n    ) {\n      return true\n    }\n\n    const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n    for (const fieldValue of fieldValues) {\n      if (fieldValue === '*') {\n        return false\n      }\n\n      const requestValue = request.headersList.get(fieldValue)\n      const queryValue = requestQuery.headersList.get(fieldValue)\n\n      // If one has the header and the other doesn't, or one has\n      // a different value than the other, return false\n      if (requestValue !== queryValue) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  #internalMatchAll (request, options, maxResponses = Infinity) {\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') {\n        // 2.2.1\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 5.\n    // 5.1\n    const responses = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        responses.push(requestResponse[1])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        responses.push(requestResponse[1])\n      }\n    }\n\n    // 5.4\n    // We don't implement CORs so we don't need to loop over the responses, yay!\n\n    // 5.5.1\n    const responseList = []\n\n    // 5.5.2\n    for (const response of responses) {\n      // 5.5.2.1\n      const responseObject = fromInnerResponse(response, 'immutable')\n\n      responseList.push(responseObject.clone())\n\n      if (responseList.length >= maxResponses) {\n        break\n      }\n    }\n\n    // 6.\n    return Object.freeze(responseList)\n  }\n}\n\nObject.defineProperties(Cache.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'Cache',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  matchAll: kEnumerableProperty,\n  add: kEnumerableProperty,\n  addAll: kEnumerableProperty,\n  put: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nconst cacheQueryOptionConverters = [\n  {\n    key: 'ignoreSearch',\n    converter: webidl.converters.boolean,\n    defaultValue: () => false\n  },\n  {\n    key: 'ignoreMethod',\n    converter: webidl.converters.boolean,\n    defaultValue: () => false\n  },\n  {\n    key: 'ignoreVary',\n    converter: webidl.converters.boolean,\n    defaultValue: () => false\n  }\n]\n\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)\n\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n  ...cacheQueryOptionConverters,\n  {\n    key: 'cacheName',\n    converter: webidl.converters.DOMString\n  }\n])\n\nwebidl.converters.Response = webidl.interfaceConverter(Response)\n\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(\n  webidl.converters.RequestInfo\n)\n\nmodule.exports = {\n  Cache\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}