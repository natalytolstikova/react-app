{"ast":null,"code":"'use strict';\n\nconst {\n  kClients\n} = require('../core/symbols');\nconst Agent = require('../dispatcher/agent');\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols');\nconst MockClient = require('./mock-client');\nconst MockPool = require('./mock-pool');\nconst {\n  matchValue,\n  buildMockOptions\n} = require('./mock-utils');\nconst {\n  InvalidArgumentError,\n  UndiciError\n} = require('../core/errors');\nconst Dispatcher = require('../dispatcher/dispatcher');\nconst Pluralizer = require('./pluralizer');\nconst PendingInterceptorsFormatter = require('./pending-interceptors-formatter');\nclass MockAgent extends Dispatcher {\n  constructor(opts) {\n    super(opts);\n    this[kNetConnect] = true;\n    this[kIsMockActive] = true;\n\n    // Instantiate Agent and encapsulate\n    if (opts?.agent && typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent');\n    }\n    const agent = opts?.agent ? opts.agent : new Agent(opts);\n    this[kAgent] = agent;\n    this[kClients] = agent[kClients];\n    this[kOptions] = buildMockOptions(opts);\n  }\n  get(origin) {\n    let dispatcher = this[kMockAgentGet](origin);\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin);\n      this[kMockAgentSet](origin, dispatcher);\n    }\n    return dispatcher;\n  }\n  dispatch(opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin);\n    return this[kAgent].dispatch(opts, handler);\n  }\n  async close() {\n    await this[kAgent].close();\n    this[kClients].clear();\n  }\n  deactivate() {\n    this[kIsMockActive] = false;\n  }\n  activate() {\n    this[kIsMockActive] = true;\n  }\n  enableNetConnect(matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher);\n      } else {\n        this[kNetConnect] = [matcher];\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true;\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.');\n    }\n  }\n  disableNetConnect() {\n    this[kNetConnect] = false;\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive() {\n    return this[kIsMockActive];\n  }\n  [kMockAgentSet](origin, dispatcher) {\n    this[kClients].set(origin, dispatcher);\n  }\n  [kFactory](origin) {\n    const mockOptions = Object.assign({\n      agent: this\n    }, this[kOptions]);\n    return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);\n  }\n  [kMockAgentGet](origin) {\n    // First check if we can immediately find it\n    const client = this[kClients].get(origin);\n    if (client) {\n      return client;\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999');\n      this[kMockAgentSet](origin, dispatcher);\n      return dispatcher;\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])) {\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin);\n        this[kMockAgentSet](origin, dispatcher);\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];\n        return dispatcher;\n      }\n    }\n  }\n  [kGetNetConnect]() {\n    return this[kNetConnect];\n  }\n  pendingInterceptors() {\n    const mockAgentClients = this[kClients];\n    return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope[kDispatches].map(dispatch => ({\n      ...dispatch,\n      origin\n    }))).filter(({\n      pending\n    }) => pending);\n  }\n  assertNoPendingInterceptors({\n    pendingInterceptorsFormatter = new PendingInterceptorsFormatter()\n  } = {}) {\n    const pending = this.pendingInterceptors();\n    if (pending.length === 0) {\n      return;\n    }\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length);\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());\n  }\n}\nmodule.exports = MockAgent;","map":{"version":3,"names":["kClients","require","Agent","kAgent","kMockAgentSet","kMockAgentGet","kDispatches","kIsMockActive","kNetConnect","kGetNetConnect","kOptions","kFactory","MockClient","MockPool","matchValue","buildMockOptions","InvalidArgumentError","UndiciError","Dispatcher","Pluralizer","PendingInterceptorsFormatter","MockAgent","constructor","opts","agent","dispatch","get","origin","dispatcher","handler","close","clear","deactivate","activate","enableNetConnect","matcher","RegExp","Array","isArray","push","disableNetConnect","isMockActive","set","mockOptions","Object","assign","connections","client","keyMatcher","nonExplicitDispatcher","from","pendingInterceptors","mockAgentClients","entries","flatMap","scope","map","filter","pending","assertNoPendingInterceptors","pendingInterceptorsFormatter","length","pluralizer","pluralize","count","noun","is","format","trim","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/mock/mock-agent.js"],"sourcesContent":["'use strict'\n\nconst { kClients } = require('../core/symbols')\nconst Agent = require('../dispatcher/agent')\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols')\nconst MockClient = require('./mock-client')\nconst MockPool = require('./mock-pool')\nconst { matchValue, buildMockOptions } = require('./mock-utils')\nconst { InvalidArgumentError, UndiciError } = require('../core/errors')\nconst Dispatcher = require('../dispatcher/dispatcher')\nconst Pluralizer = require('./pluralizer')\nconst PendingInterceptorsFormatter = require('./pending-interceptors-formatter')\n\nclass MockAgent extends Dispatcher {\n  constructor (opts) {\n    super(opts)\n\n    this[kNetConnect] = true\n    this[kIsMockActive] = true\n\n    // Instantiate Agent and encapsulate\n    if ((opts?.agent && typeof opts.agent.dispatch !== 'function')) {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n    const agent = opts?.agent ? opts.agent : new Agent(opts)\n    this[kAgent] = agent\n\n    this[kClients] = agent[kClients]\n    this[kOptions] = buildMockOptions(opts)\n  }\n\n  get (origin) {\n    let dispatcher = this[kMockAgentGet](origin)\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin)\n      this[kMockAgentSet](origin, dispatcher)\n    }\n    return dispatcher\n  }\n\n  dispatch (opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin)\n    return this[kAgent].dispatch(opts, handler)\n  }\n\n  async close () {\n    await this[kAgent].close()\n    this[kClients].clear()\n  }\n\n  deactivate () {\n    this[kIsMockActive] = false\n  }\n\n  activate () {\n    this[kIsMockActive] = true\n  }\n\n  enableNetConnect (matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher)\n      } else {\n        this[kNetConnect] = [matcher]\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')\n    }\n  }\n\n  disableNetConnect () {\n    this[kNetConnect] = false\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive () {\n    return this[kIsMockActive]\n  }\n\n  [kMockAgentSet] (origin, dispatcher) {\n    this[kClients].set(origin, dispatcher)\n  }\n\n  [kFactory] (origin) {\n    const mockOptions = Object.assign({ agent: this }, this[kOptions])\n    return this[kOptions] && this[kOptions].connections === 1\n      ? new MockClient(origin, mockOptions)\n      : new MockPool(origin, mockOptions)\n  }\n\n  [kMockAgentGet] (origin) {\n    // First check if we can immediately find it\n    const client = this[kClients].get(origin)\n    if (client) {\n      return client\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999')\n      this[kMockAgentSet](origin, dispatcher)\n      return dispatcher\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])) {\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin)\n        this[kMockAgentSet](origin, dispatcher)\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]\n        return dispatcher\n      }\n    }\n  }\n\n  [kGetNetConnect] () {\n    return this[kNetConnect]\n  }\n\n  pendingInterceptors () {\n    const mockAgentClients = this[kClients]\n\n    return Array.from(mockAgentClients.entries())\n      .flatMap(([origin, scope]) => scope[kDispatches].map(dispatch => ({ ...dispatch, origin })))\n      .filter(({ pending }) => pending)\n  }\n\n  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n    const pending = this.pendingInterceptors()\n\n    if (pending.length === 0) {\n      return\n    }\n\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)\n\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim())\n  }\n}\n\nmodule.exports = MockAgent\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}