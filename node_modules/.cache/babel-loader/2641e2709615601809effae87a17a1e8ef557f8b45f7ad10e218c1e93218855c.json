{"ast":null,"code":"'use strict';\n\nconst {\n  pipeline\n} = require('node:stream');\nconst {\n  fetching\n} = require('../fetch');\nconst {\n  makeRequest\n} = require('../fetch/request');\nconst {\n  webidl\n} = require('../fetch/webidl');\nconst {\n  EventSourceStream\n} = require('./eventsource-stream');\nconst {\n  parseMIMEType\n} = require('../fetch/data-url');\nconst {\n  createFastMessageEvent\n} = require('../websocket/events');\nconst {\n  isNetworkError\n} = require('../fetch/response');\nconst {\n  delay\n} = require('./util');\nconst {\n  kEnumerableProperty\n} = require('../../core/util');\nconst {\n  environmentSettingsObject\n} = require('../fetch/util');\nlet experimentalWarned = false;\n\n/**\n * A reconnection time, in milliseconds. This must initially be an implementation-defined value,\n * probably in the region of a few seconds.\n *\n * In Comparison:\n * - Chrome uses 3000ms.\n * - Deno uses 5000ms.\n *\n * @type {3000}\n */\nconst defaultReconnectionTime = 3000;\n\n/**\n * The readyState attribute represents the state of the connection.\n * @enum\n * @readonly\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate-dev\n */\n\n/**\n * The connection has not yet been established, or it was closed and the user\n * agent is reconnecting.\n * @type {0}\n */\nconst CONNECTING = 0;\n\n/**\n * The user agent has an open connection and is dispatching events as it\n * receives them.\n * @type {1}\n */\nconst OPEN = 1;\n\n/**\n * The connection is not open, and the user agent is not trying to reconnect.\n * @type {2}\n */\nconst CLOSED = 2;\n\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"same-origin\".\n * @type {'anonymous'}\n */\nconst ANONYMOUS = 'anonymous';\n\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"include\".\n * @type {'use-credentials'}\n */\nconst USE_CREDENTIALS = 'use-credentials';\n\n/**\n * The EventSource interface is used to receive server-sent events. It\n * connects to a server over HTTP and receives events in text/event-stream\n * format without closing the connection.\n * @extends {EventTarget}\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events\n * @api public\n */\nclass EventSource extends EventTarget {\n  #events = {\n    open: null,\n    error: null,\n    message: null\n  };\n  #url = null;\n  #withCredentials = false;\n  #readyState = CONNECTING;\n  #request = null;\n  #controller = null;\n  #dispatcher;\n\n  /**\n   * @type {import('./eventsource-stream').eventSourceSettings}\n   */\n  #state;\n\n  /**\n   * Creates a new EventSource object.\n   * @param {string} url\n   * @param {EventSourceInit} [eventSourceInitDict]\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface\n   */\n  constructor(url, eventSourceInitDict = {}) {\n    // 1. Let ev be a new EventSource object.\n    super();\n    const prefix = 'EventSource constructor';\n    webidl.argumentLengthCheck(arguments, 1, prefix);\n    if (!experimentalWarned) {\n      experimentalWarned = true;\n      process.emitWarning('EventSource is experimental, expect them to change at any time.', {\n        code: 'UNDICI-ES'\n      });\n    }\n    url = webidl.converters.USVString(url, prefix, 'url');\n    eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, 'eventSourceInitDict');\n    this.#dispatcher = eventSourceInitDict.dispatcher;\n    this.#state = {\n      lastEventId: '',\n      reconnectionTime: defaultReconnectionTime\n    };\n\n    // 2. Let settings be ev's relevant settings object.\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    const settings = environmentSettingsObject;\n    let urlRecord;\n    try {\n      // 3. Let urlRecord be the result of encoding-parsing a URL given url, relative to settings.\n      urlRecord = new URL(url, settings.settingsObject.baseUrl);\n      this.#state.origin = urlRecord.origin;\n    } catch (e) {\n      // 4. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError');\n    }\n\n    // 5. Set ev's url to urlRecord.\n    this.#url = urlRecord.href;\n\n    // 6. Let corsAttributeState be Anonymous.\n    let corsAttributeState = ANONYMOUS;\n\n    // 7. If the value of eventSourceInitDict's withCredentials member is true,\n    // then set corsAttributeState to Use Credentials and set ev's\n    // withCredentials attribute to true.\n    if (eventSourceInitDict.withCredentials) {\n      corsAttributeState = USE_CREDENTIALS;\n      this.#withCredentials = true;\n    }\n\n    // 8. Let request be the result of creating a potential-CORS request given\n    // urlRecord, the empty string, and corsAttributeState.\n    const initRequest = {\n      redirect: 'follow',\n      keepalive: true,\n      // @see https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes\n      mode: 'cors',\n      credentials: corsAttributeState === 'anonymous' ? 'same-origin' : 'omit',\n      referrer: 'no-referrer'\n    };\n\n    // 9. Set request's client to settings.\n    initRequest.client = environmentSettingsObject.settingsObject;\n\n    // 10. User agents may set (`Accept`, `text/event-stream`) in request's header list.\n    initRequest.headersList = [['accept', {\n      name: 'accept',\n      value: 'text/event-stream'\n    }]];\n\n    // 11. Set request's cache mode to \"no-store\".\n    initRequest.cache = 'no-store';\n\n    // 12. Set request's initiator type to \"other\".\n    initRequest.initiator = 'other';\n    initRequest.urlList = [new URL(this.#url)];\n\n    // 13. Set ev's request to request.\n    this.#request = makeRequest(initRequest);\n    this.#connect();\n  }\n\n  /**\n   * Returns the state of this EventSource object's connection. It can have the\n   * values described below.\n   * @returns {0|1|2}\n   * @readonly\n   */\n  get readyState() {\n    return this.#readyState;\n  }\n\n  /**\n   * Returns the URL providing the event stream.\n   * @readonly\n   * @returns {string}\n   */\n  get url() {\n    return this.#url;\n  }\n\n  /**\n   * Returns a boolean indicating whether the EventSource object was\n   * instantiated with CORS credentials set (true), or not (false, the default).\n   */\n  get withCredentials() {\n    return this.#withCredentials;\n  }\n  #connect() {\n    if (this.#readyState === CLOSED) return;\n    this.#readyState = CONNECTING;\n    const fetchParams = {\n      request: this.#request,\n      dispatcher: this.#dispatcher\n    };\n\n    // 14. Let processEventSourceEndOfBody given response res be the following step: if res is not a network error, then reestablish the connection.\n    const processEventSourceEndOfBody = response => {\n      if (isNetworkError(response)) {\n        this.dispatchEvent(new Event('error'));\n        this.close();\n      }\n      this.#reconnect();\n    };\n\n    // 15. Fetch request, with processResponseEndOfBody set to processEventSourceEndOfBody...\n    fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;\n\n    // and processResponse set to the following steps given response res:\n    fetchParams.processResponse = response => {\n      // 1. If res is an aborted network error, then fail the connection.\n\n      if (isNetworkError(response)) {\n        // 1. When a user agent is to fail the connection, the user agent\n        // must queue a task which, if the readyState attribute is set to a\n        // value other than CLOSED, sets the readyState attribute to CLOSED\n        // and fires an event named error at the EventSource object. Once the\n        // user agent has failed the connection, it does not attempt to\n        // reconnect.\n        if (response.aborted) {\n          this.close();\n          this.dispatchEvent(new Event('error'));\n          return;\n          // 2. Otherwise, if res is a network error, then reestablish the\n          // connection, unless the user agent knows that to be futile, in\n          // which case the user agent may fail the connection.\n        } else {\n          this.#reconnect();\n          return;\n        }\n      }\n\n      // 3. Otherwise, if res's status is not 200, or if res's `Content-Type`\n      // is not `text/event-stream`, then fail the connection.\n      const contentType = response.headersList.get('content-type', true);\n      const mimeType = contentType !== null ? parseMIMEType(contentType) : 'failure';\n      const contentTypeValid = mimeType !== 'failure' && mimeType.essence === 'text/event-stream';\n      if (response.status !== 200 || contentTypeValid === false) {\n        this.close();\n        this.dispatchEvent(new Event('error'));\n        return;\n      }\n\n      // 4. Otherwise, announce the connection and interpret res's body\n      // line by line.\n\n      // When a user agent is to announce the connection, the user agent\n      // must queue a task which, if the readyState attribute is set to a\n      // value other than CLOSED, sets the readyState attribute to OPEN\n      // and fires an event named open at the EventSource object.\n      // @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n      this.#readyState = OPEN;\n      this.dispatchEvent(new Event('open'));\n\n      // If redirected to a different origin, set the origin to the new origin.\n      this.#state.origin = response.urlList[response.urlList.length - 1].origin;\n      const eventSourceStream = new EventSourceStream({\n        eventSourceSettings: this.#state,\n        push: event => {\n          this.dispatchEvent(createFastMessageEvent(event.type, event.options));\n        }\n      });\n      pipeline(response.body.stream, eventSourceStream, error => {\n        if (error?.aborted === false) {\n          this.close();\n          this.dispatchEvent(new Event('error'));\n        }\n      });\n    };\n    this.#controller = fetching(fetchParams);\n  }\n\n  /**\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n   * @returns {Promise<void>}\n   */\n  async #reconnect() {\n    // When a user agent is to reestablish the connection, the user agent must\n    // run the following steps. These steps are run in parallel, not as part of\n    // a task. (The tasks that it queues, of course, are run like normal tasks\n    // and not themselves in parallel.)\n\n    // 1. Queue a task to run the following steps:\n\n    //   1. If the readyState attribute is set to CLOSED, abort the task.\n    if (this.#readyState === CLOSED) return;\n\n    //   2. Set the readyState attribute to CONNECTING.\n    this.#readyState = CONNECTING;\n\n    //   3. Fire an event named error at the EventSource object.\n    this.dispatchEvent(new Event('error'));\n\n    // 2. Wait a delay equal to the reconnection time of the event source.\n    await delay(this.#state.reconnectionTime);\n\n    // 5. Queue a task to run the following steps:\n\n    //   1. If the EventSource object's readyState attribute is not set to\n    //      CONNECTING, then return.\n    if (this.#readyState !== CONNECTING) return;\n\n    //   2. Let request be the EventSource object's request.\n    //   3. If the EventSource object's last event ID string is not the empty\n    //      string, then:\n    //      1. Let lastEventIDValue be the EventSource object's last event ID\n    //         string, encoded as UTF-8.\n    //      2. Set (`Last-Event-ID`, lastEventIDValue) in request's header\n    //         list.\n    if (this.#state.lastEventId.length) {\n      this.#request.headersList.set('last-event-id', this.#state.lastEventId, true);\n    }\n\n    //   4. Fetch request and process the response obtained in this fashion, if any, as described earlier in this section.\n    this.#connect();\n  }\n\n  /**\n   * Closes the connection, if any, and sets the readyState attribute to\n   * CLOSED.\n   */\n  close() {\n    webidl.brandCheck(this, EventSource);\n    if (this.#readyState === CLOSED) return;\n    this.#readyState = CLOSED;\n    this.#controller.abort();\n    this.#request = null;\n  }\n  get onopen() {\n    return this.#events.open;\n  }\n  set onopen(fn) {\n    if (this.#events.open) {\n      this.removeEventListener('open', this.#events.open);\n    }\n    if (typeof fn === 'function') {\n      this.#events.open = fn;\n      this.addEventListener('open', fn);\n    } else {\n      this.#events.open = null;\n    }\n  }\n  get onmessage() {\n    return this.#events.message;\n  }\n  set onmessage(fn) {\n    if (this.#events.message) {\n      this.removeEventListener('message', this.#events.message);\n    }\n    if (typeof fn === 'function') {\n      this.#events.message = fn;\n      this.addEventListener('message', fn);\n    } else {\n      this.#events.message = null;\n    }\n  }\n  get onerror() {\n    return this.#events.error;\n  }\n  set onerror(fn) {\n    if (this.#events.error) {\n      this.removeEventListener('error', this.#events.error);\n    }\n    if (typeof fn === 'function') {\n      this.#events.error = fn;\n      this.addEventListener('error', fn);\n    } else {\n      this.#events.error = null;\n    }\n  }\n}\nconst constantsPropertyDescriptors = {\n  CONNECTING: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: CONNECTING,\n    writable: false\n  },\n  OPEN: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: OPEN,\n    writable: false\n  },\n  CLOSED: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: CLOSED,\n    writable: false\n  }\n};\nObject.defineProperties(EventSource, constantsPropertyDescriptors);\nObject.defineProperties(EventSource.prototype, constantsPropertyDescriptors);\nObject.defineProperties(EventSource.prototype, {\n  close: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  url: kEnumerableProperty,\n  withCredentials: kEnumerableProperty\n});\nwebidl.converters.EventSourceInitDict = webidl.dictionaryConverter([{\n  key: 'withCredentials',\n  converter: webidl.converters.boolean,\n  defaultValue: () => false\n}, {\n  key: 'dispatcher',\n  // undici only\n  converter: webidl.converters.any\n}]);\nmodule.exports = {\n  EventSource,\n  defaultReconnectionTime\n};","map":{"version":3,"names":["pipeline","require","fetching","makeRequest","webidl","EventSourceStream","parseMIMEType","createFastMessageEvent","isNetworkError","delay","kEnumerableProperty","environmentSettingsObject","experimentalWarned","defaultReconnectionTime","CONNECTING","OPEN","CLOSED","ANONYMOUS","USE_CREDENTIALS","EventSource","EventTarget","events","open","error","message","url","withCredentials","readyState","request","controller","dispatcher","state","constructor","eventSourceInitDict","prefix","argumentLengthCheck","arguments","process","emitWarning","code","converters","USVString","EventSourceInitDict","lastEventId","reconnectionTime","settings","urlRecord","URL","settingsObject","baseUrl","origin","e","DOMException","href","corsAttributeState","initRequest","redirect","keepalive","mode","credentials","referrer","client","headersList","name","value","cache","initiator","urlList","connect","#connect","fetchParams","processEventSourceEndOfBody","response","dispatchEvent","Event","close","reconnect","processResponseEndOfBody","processResponse","aborted","contentType","get","mimeType","contentTypeValid","essence","status","length","eventSourceStream","eventSourceSettings","push","event","type","options","body","stream","#reconnect","set","brandCheck","abort","onopen","fn","removeEventListener","addEventListener","onmessage","onerror","constantsPropertyDescriptors","__proto__","configurable","enumerable","writable","Object","defineProperties","prototype","dictionaryConverter","key","converter","boolean","defaultValue","any","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/web/eventsource/eventsource.js"],"sourcesContent":["'use strict'\n\nconst { pipeline } = require('node:stream')\nconst { fetching } = require('../fetch')\nconst { makeRequest } = require('../fetch/request')\nconst { webidl } = require('../fetch/webidl')\nconst { EventSourceStream } = require('./eventsource-stream')\nconst { parseMIMEType } = require('../fetch/data-url')\nconst { createFastMessageEvent } = require('../websocket/events')\nconst { isNetworkError } = require('../fetch/response')\nconst { delay } = require('./util')\nconst { kEnumerableProperty } = require('../../core/util')\nconst { environmentSettingsObject } = require('../fetch/util')\n\nlet experimentalWarned = false\n\n/**\n * A reconnection time, in milliseconds. This must initially be an implementation-defined value,\n * probably in the region of a few seconds.\n *\n * In Comparison:\n * - Chrome uses 3000ms.\n * - Deno uses 5000ms.\n *\n * @type {3000}\n */\nconst defaultReconnectionTime = 3000\n\n/**\n * The readyState attribute represents the state of the connection.\n * @enum\n * @readonly\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate-dev\n */\n\n/**\n * The connection has not yet been established, or it was closed and the user\n * agent is reconnecting.\n * @type {0}\n */\nconst CONNECTING = 0\n\n/**\n * The user agent has an open connection and is dispatching events as it\n * receives them.\n * @type {1}\n */\nconst OPEN = 1\n\n/**\n * The connection is not open, and the user agent is not trying to reconnect.\n * @type {2}\n */\nconst CLOSED = 2\n\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"same-origin\".\n * @type {'anonymous'}\n */\nconst ANONYMOUS = 'anonymous'\n\n/**\n * Requests for the element will have their mode set to \"cors\" and their credentials mode set to \"include\".\n * @type {'use-credentials'}\n */\nconst USE_CREDENTIALS = 'use-credentials'\n\n/**\n * The EventSource interface is used to receive server-sent events. It\n * connects to a server over HTTP and receives events in text/event-stream\n * format without closing the connection.\n * @extends {EventTarget}\n * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events\n * @api public\n */\nclass EventSource extends EventTarget {\n  #events = {\n    open: null,\n    error: null,\n    message: null\n  }\n\n  #url = null\n  #withCredentials = false\n\n  #readyState = CONNECTING\n\n  #request = null\n  #controller = null\n\n  #dispatcher\n\n  /**\n   * @type {import('./eventsource-stream').eventSourceSettings}\n   */\n  #state\n\n  /**\n   * Creates a new EventSource object.\n   * @param {string} url\n   * @param {EventSourceInit} [eventSourceInitDict]\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface\n   */\n  constructor (url, eventSourceInitDict = {}) {\n    // 1. Let ev be a new EventSource object.\n    super()\n\n    const prefix = 'EventSource constructor'\n    webidl.argumentLengthCheck(arguments, 1, prefix)\n\n    if (!experimentalWarned) {\n      experimentalWarned = true\n      process.emitWarning('EventSource is experimental, expect them to change at any time.', {\n        code: 'UNDICI-ES'\n      })\n    }\n\n    url = webidl.converters.USVString(url, prefix, 'url')\n    eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, 'eventSourceInitDict')\n\n    this.#dispatcher = eventSourceInitDict.dispatcher\n    this.#state = {\n      lastEventId: '',\n      reconnectionTime: defaultReconnectionTime\n    }\n\n    // 2. Let settings be ev's relevant settings object.\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    const settings = environmentSettingsObject\n\n    let urlRecord\n\n    try {\n      // 3. Let urlRecord be the result of encoding-parsing a URL given url, relative to settings.\n      urlRecord = new URL(url, settings.settingsObject.baseUrl)\n      this.#state.origin = urlRecord.origin\n    } catch (e) {\n      // 4. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError')\n    }\n\n    // 5. Set ev's url to urlRecord.\n    this.#url = urlRecord.href\n\n    // 6. Let corsAttributeState be Anonymous.\n    let corsAttributeState = ANONYMOUS\n\n    // 7. If the value of eventSourceInitDict's withCredentials member is true,\n    // then set corsAttributeState to Use Credentials and set ev's\n    // withCredentials attribute to true.\n    if (eventSourceInitDict.withCredentials) {\n      corsAttributeState = USE_CREDENTIALS\n      this.#withCredentials = true\n    }\n\n    // 8. Let request be the result of creating a potential-CORS request given\n    // urlRecord, the empty string, and corsAttributeState.\n    const initRequest = {\n      redirect: 'follow',\n      keepalive: true,\n      // @see https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes\n      mode: 'cors',\n      credentials: corsAttributeState === 'anonymous'\n        ? 'same-origin'\n        : 'omit',\n      referrer: 'no-referrer'\n    }\n\n    // 9. Set request's client to settings.\n    initRequest.client = environmentSettingsObject.settingsObject\n\n    // 10. User agents may set (`Accept`, `text/event-stream`) in request's header list.\n    initRequest.headersList = [['accept', { name: 'accept', value: 'text/event-stream' }]]\n\n    // 11. Set request's cache mode to \"no-store\".\n    initRequest.cache = 'no-store'\n\n    // 12. Set request's initiator type to \"other\".\n    initRequest.initiator = 'other'\n\n    initRequest.urlList = [new URL(this.#url)]\n\n    // 13. Set ev's request to request.\n    this.#request = makeRequest(initRequest)\n\n    this.#connect()\n  }\n\n  /**\n   * Returns the state of this EventSource object's connection. It can have the\n   * values described below.\n   * @returns {0|1|2}\n   * @readonly\n   */\n  get readyState () {\n    return this.#readyState\n  }\n\n  /**\n   * Returns the URL providing the event stream.\n   * @readonly\n   * @returns {string}\n   */\n  get url () {\n    return this.#url\n  }\n\n  /**\n   * Returns a boolean indicating whether the EventSource object was\n   * instantiated with CORS credentials set (true), or not (false, the default).\n   */\n  get withCredentials () {\n    return this.#withCredentials\n  }\n\n  #connect () {\n    if (this.#readyState === CLOSED) return\n\n    this.#readyState = CONNECTING\n\n    const fetchParams = {\n      request: this.#request,\n      dispatcher: this.#dispatcher\n    }\n\n    // 14. Let processEventSourceEndOfBody given response res be the following step: if res is not a network error, then reestablish the connection.\n    const processEventSourceEndOfBody = (response) => {\n      if (isNetworkError(response)) {\n        this.dispatchEvent(new Event('error'))\n        this.close()\n      }\n\n      this.#reconnect()\n    }\n\n    // 15. Fetch request, with processResponseEndOfBody set to processEventSourceEndOfBody...\n    fetchParams.processResponseEndOfBody = processEventSourceEndOfBody\n\n    // and processResponse set to the following steps given response res:\n    fetchParams.processResponse = (response) => {\n      // 1. If res is an aborted network error, then fail the connection.\n\n      if (isNetworkError(response)) {\n        // 1. When a user agent is to fail the connection, the user agent\n        // must queue a task which, if the readyState attribute is set to a\n        // value other than CLOSED, sets the readyState attribute to CLOSED\n        // and fires an event named error at the EventSource object. Once the\n        // user agent has failed the connection, it does not attempt to\n        // reconnect.\n        if (response.aborted) {\n          this.close()\n          this.dispatchEvent(new Event('error'))\n          return\n          // 2. Otherwise, if res is a network error, then reestablish the\n          // connection, unless the user agent knows that to be futile, in\n          // which case the user agent may fail the connection.\n        } else {\n          this.#reconnect()\n          return\n        }\n      }\n\n      // 3. Otherwise, if res's status is not 200, or if res's `Content-Type`\n      // is not `text/event-stream`, then fail the connection.\n      const contentType = response.headersList.get('content-type', true)\n      const mimeType = contentType !== null ? parseMIMEType(contentType) : 'failure'\n      const contentTypeValid = mimeType !== 'failure' && mimeType.essence === 'text/event-stream'\n      if (\n        response.status !== 200 ||\n        contentTypeValid === false\n      ) {\n        this.close()\n        this.dispatchEvent(new Event('error'))\n        return\n      }\n\n      // 4. Otherwise, announce the connection and interpret res's body\n      // line by line.\n\n      // When a user agent is to announce the connection, the user agent\n      // must queue a task which, if the readyState attribute is set to a\n      // value other than CLOSED, sets the readyState attribute to OPEN\n      // and fires an event named open at the EventSource object.\n      // @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n      this.#readyState = OPEN\n      this.dispatchEvent(new Event('open'))\n\n      // If redirected to a different origin, set the origin to the new origin.\n      this.#state.origin = response.urlList[response.urlList.length - 1].origin\n\n      const eventSourceStream = new EventSourceStream({\n        eventSourceSettings: this.#state,\n        push: (event) => {\n          this.dispatchEvent(createFastMessageEvent(\n            event.type,\n            event.options\n          ))\n        }\n      })\n\n      pipeline(response.body.stream,\n        eventSourceStream,\n        (error) => {\n          if (\n            error?.aborted === false\n          ) {\n            this.close()\n            this.dispatchEvent(new Event('error'))\n          }\n        })\n    }\n\n    this.#controller = fetching(fetchParams)\n  }\n\n  /**\n   * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n   * @returns {Promise<void>}\n   */\n  async #reconnect () {\n    // When a user agent is to reestablish the connection, the user agent must\n    // run the following steps. These steps are run in parallel, not as part of\n    // a task. (The tasks that it queues, of course, are run like normal tasks\n    // and not themselves in parallel.)\n\n    // 1. Queue a task to run the following steps:\n\n    //   1. If the readyState attribute is set to CLOSED, abort the task.\n    if (this.#readyState === CLOSED) return\n\n    //   2. Set the readyState attribute to CONNECTING.\n    this.#readyState = CONNECTING\n\n    //   3. Fire an event named error at the EventSource object.\n    this.dispatchEvent(new Event('error'))\n\n    // 2. Wait a delay equal to the reconnection time of the event source.\n    await delay(this.#state.reconnectionTime)\n\n    // 5. Queue a task to run the following steps:\n\n    //   1. If the EventSource object's readyState attribute is not set to\n    //      CONNECTING, then return.\n    if (this.#readyState !== CONNECTING) return\n\n    //   2. Let request be the EventSource object's request.\n    //   3. If the EventSource object's last event ID string is not the empty\n    //      string, then:\n    //      1. Let lastEventIDValue be the EventSource object's last event ID\n    //         string, encoded as UTF-8.\n    //      2. Set (`Last-Event-ID`, lastEventIDValue) in request's header\n    //         list.\n    if (this.#state.lastEventId.length) {\n      this.#request.headersList.set('last-event-id', this.#state.lastEventId, true)\n    }\n\n    //   4. Fetch request and process the response obtained in this fashion, if any, as described earlier in this section.\n    this.#connect()\n  }\n\n  /**\n   * Closes the connection, if any, and sets the readyState attribute to\n   * CLOSED.\n   */\n  close () {\n    webidl.brandCheck(this, EventSource)\n\n    if (this.#readyState === CLOSED) return\n    this.#readyState = CLOSED\n    this.#controller.abort()\n    this.#request = null\n  }\n\n  get onopen () {\n    return this.#events.open\n  }\n\n  set onopen (fn) {\n    if (this.#events.open) {\n      this.removeEventListener('open', this.#events.open)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.open = fn\n      this.addEventListener('open', fn)\n    } else {\n      this.#events.open = null\n    }\n  }\n\n  get onmessage () {\n    return this.#events.message\n  }\n\n  set onmessage (fn) {\n    if (this.#events.message) {\n      this.removeEventListener('message', this.#events.message)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.message = fn\n      this.addEventListener('message', fn)\n    } else {\n      this.#events.message = null\n    }\n  }\n\n  get onerror () {\n    return this.#events.error\n  }\n\n  set onerror (fn) {\n    if (this.#events.error) {\n      this.removeEventListener('error', this.#events.error)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this.#events.error = null\n    }\n  }\n}\n\nconst constantsPropertyDescriptors = {\n  CONNECTING: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: CONNECTING,\n    writable: false\n  },\n  OPEN: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: OPEN,\n    writable: false\n  },\n  CLOSED: {\n    __proto__: null,\n    configurable: false,\n    enumerable: true,\n    value: CLOSED,\n    writable: false\n  }\n}\n\nObject.defineProperties(EventSource, constantsPropertyDescriptors)\nObject.defineProperties(EventSource.prototype, constantsPropertyDescriptors)\n\nObject.defineProperties(EventSource.prototype, {\n  close: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  url: kEnumerableProperty,\n  withCredentials: kEnumerableProperty\n})\n\nwebidl.converters.EventSourceInitDict = webidl.dictionaryConverter([\n  {\n    key: 'withCredentials',\n    converter: webidl.converters.boolean,\n    defaultValue: () => false\n  },\n  {\n    key: 'dispatcher', // undici only\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = {\n  EventSource,\n  defaultReconnectionTime\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}