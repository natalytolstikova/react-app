{"ast":null,"code":"'use strict';\n\nconst {\n  Headers,\n  HeadersList,\n  fill,\n  getHeadersGuard,\n  setHeadersGuard,\n  setHeadersList\n} = require('./headers');\nconst {\n  extractBody,\n  cloneBody,\n  mixinBody,\n  hasFinalizationRegistry,\n  streamRegistry,\n  bodyUnusable\n} = require('./body');\nconst util = require('../../core/util');\nconst nodeUtil = require('node:util');\nconst {\n  kEnumerableProperty\n} = util;\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode,\n  environmentSettingsObject: relevantRealm\n} = require('./util');\nconst {\n  redirectStatusSet,\n  nullBodyStatus\n} = require('./constants');\nconst {\n  kState,\n  kHeaders\n} = require('./symbols');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  FormData\n} = require('./formdata');\nconst {\n  URLSerializer\n} = require('./data-url');\nconst {\n  kConstruct\n} = require('../../core/symbols');\nconst assert = require('node:assert');\nconst {\n  types\n} = require('node:util');\nconst textEncoder = new TextEncoder('utf-8');\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error() {\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this’s\n    // relevant Realm.\n    const responseObject = fromInnerResponse(makeNetworkError(), 'immutable');\n    return responseObject;\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json(data, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, 'Response.json');\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init);\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(serializeJavascriptValueToJSONString(data));\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes);\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this’s relevant Realm.\n    const responseObject = fromInnerResponse(makeResponse({}), 'response');\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, {\n      body: body[0],\n      type: 'application/json'\n    });\n\n    // 5. Return responseObject.\n    return responseObject;\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect(url, status = 302) {\n    webidl.argumentLengthCheck(arguments, 1, 'Response.redirect');\n    url = webidl.converters.USVString(url);\n    status = webidl.converters['unsigned short'](status);\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object’s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL;\n    try {\n      parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);\n    } catch (err) {\n      throw new TypeError(`Failed to parse URL from ${url}`, {\n        cause: err\n      });\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError(`Invalid status code ${status}`);\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this’s relevant Realm.\n    const responseObject = fromInnerResponse(makeResponse({}), 'immutable');\n\n    // 5. Set responseObject’s response’s status to status.\n    responseObject[kState].status = status;\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL));\n\n    // 7. Append `Location`/value to responseObject’s response’s header list.\n    responseObject[kState].headersList.append('location', value, true);\n\n    // 8. Return responseObject.\n    return responseObject;\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor(body = null, init = {}) {\n    if (body === kConstruct) {\n      return;\n    }\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body);\n    }\n    init = webidl.converters.ResponseInit(init);\n\n    // 1. Set this’s response to a new response.\n    this[kState] = makeResponse({});\n\n    // 2. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is this’s response’s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct);\n    setHeadersGuard(this[kHeaders], 'response');\n    setHeadersList(this[kHeaders], this[kState].headersList);\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null;\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body);\n      bodyWithType = {\n        body: extractedBody,\n        type\n      };\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType);\n  }\n\n  // Returns response’s type, e.g., \"cors\".\n  get type() {\n    webidl.brandCheck(this, Response);\n\n    // The type getter steps are to return this’s response’s type.\n    return this[kState].type;\n  }\n\n  // Returns response’s URL, if it has one; otherwise the empty string.\n  get url() {\n    webidl.brandCheck(this, Response);\n    const urlList = this[kState].urlList;\n\n    // The url getter steps are to return the empty string if this’s\n    // response’s URL is null; otherwise this’s response’s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null;\n    if (url === null) {\n      return '';\n    }\n    return URLSerializer(url, true);\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected() {\n    webidl.brandCheck(this, Response);\n\n    // The redirected getter steps are to return true if this’s response’s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1;\n  }\n\n  // Returns response’s status.\n  get status() {\n    webidl.brandCheck(this, Response);\n\n    // The status getter steps are to return this’s response’s status.\n    return this[kState].status;\n  }\n\n  // Returns whether response’s status is an ok status.\n  get ok() {\n    webidl.brandCheck(this, Response);\n\n    // The ok getter steps are to return true if this’s response’s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299;\n  }\n\n  // Returns response’s status message.\n  get statusText() {\n    webidl.brandCheck(this, Response);\n\n    // The statusText getter steps are to return this’s response’s status\n    // message.\n    return this[kState].statusText;\n  }\n\n  // Returns response’s headers as Headers.\n  get headers() {\n    webidl.brandCheck(this, Response);\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n  get body() {\n    webidl.brandCheck(this, Response);\n    return this[kState].body ? this[kState].body.stream : null;\n  }\n  get bodyUsed() {\n    webidl.brandCheck(this, Response);\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n  }\n\n  // Returns a clone of response.\n  clone() {\n    webidl.brandCheck(this, Response);\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (bodyUnusable(this)) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      });\n    }\n\n    // 2. Let clonedResponse be the result of cloning this’s response.\n    const clonedResponse = cloneResponse(this[kState]);\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n    return fromInnerResponse(clonedResponse, getHeadersGuard(this[kHeaders]));\n  }\n  [nodeUtil.inspect.custom](depth, options) {\n    if (options.depth === null) {\n      options.depth = 2;\n    }\n    options.colors ??= true;\n    const properties = {\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      body: this.body,\n      bodyUsed: this.bodyUsed,\n      ok: this.ok,\n      redirected: this.redirected,\n      type: this.type,\n      url: this.url\n    };\n    return `Response ${nodeUtil.formatWithOptions(options, properties)}`;\n  }\n}\nmixinBody(Response);\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n});\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n});\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse(response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response’s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(cloneResponse(response.internalResponse), response.type);\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({\n    ...response,\n    body: null\n  });\n\n  // 3. If response’s body is non-null, then set newResponse’s body to the\n  // result of cloning response’s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(newResponse, response.body);\n  }\n\n  // 4. Return newResponse.\n  return newResponse;\n}\nfunction makeResponse(init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init?.headersList ? new HeadersList(init?.headersList) : new HeadersList(),\n    urlList: init?.urlList ? [...init.urlList] : []\n  };\n}\nfunction makeNetworkError(reason) {\n  const isError = isErrorLike(reason);\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError ? reason : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  });\n}\n\n// @see https://fetch.spec.whatwg.org/#concept-network-error\nfunction isNetworkError(response) {\n  return (\n    // A network error is a response whose type is \"error\",\n    response.type === 'error' &&\n    // status is 0\n    response.status === 0\n  );\n}\nfunction makeFilteredResponse(response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  };\n  return new Proxy(response, {\n    get(target, p) {\n      return p in state ? state[p] : target[p];\n    },\n    set(target, p, value) {\n      assert(!(p in state));\n      target[p] = value;\n      return true;\n    }\n  });\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse(response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request’s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response’s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    });\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response’s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response’s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    });\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    });\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    });\n  } else {\n    assert(false);\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError(fetchParams, err = null) {\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams));\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), {\n    cause: err\n  })) : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), {\n    cause: err\n  }));\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse(response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText');\n    }\n  }\n\n  // 3. Set response’s response’s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status;\n  }\n\n  // 4. Set response’s response’s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText;\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers);\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: `Invalid response status code ${response.status}`\n      });\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body;\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('content-type', true)) {\n      response[kState].headersList.append('content-type', body.type, true);\n    }\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#response-create\n * @param {any} innerResponse\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Response}\n */\nfunction fromInnerResponse(innerResponse, guard) {\n  const response = new Response(kConstruct);\n  response[kState] = innerResponse;\n  response[kHeaders] = new Headers(kConstruct);\n  setHeadersList(response[kHeaders], innerResponse.headersList);\n  setHeadersGuard(response[kHeaders], guard);\n  if (hasFinalizationRegistry && innerResponse.body?.stream) {\n    // If the target (response) is reclaimed, the cleanup callback may be called at some point with\n    // the held value provided for it (innerResponse.body.stream). The held value can be any value:\n    // a primitive or an object, even undefined. If the held value is an object, the registry keeps\n    // a strong reference to it (so it can pass it to the cleanup callback later). Reworded from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n    streamRegistry.register(response, new WeakRef(innerResponse.body.stream));\n  }\n  return response;\n}\nwebidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);\nwebidl.converters.FormData = webidl.interfaceConverter(FormData);\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V, prefix, name) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V, prefix, name);\n  }\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, prefix, name, {\n      strict: false\n    });\n  }\n  if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n    return webidl.converters.BufferSource(V, prefix, name);\n  }\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, prefix, name, {\n      strict: false\n    });\n  }\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V, prefix, name);\n  }\n  return webidl.converters.DOMString(V, prefix, name);\n};\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V, prefix, argument) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V, prefix, argument);\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V;\n  }\n  return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument);\n};\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([{\n  key: 'status',\n  converter: webidl.converters['unsigned short'],\n  defaultValue: () => 200\n}, {\n  key: 'statusText',\n  converter: webidl.converters.ByteString,\n  defaultValue: () => ''\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}]);\nmodule.exports = {\n  isNetworkError,\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse,\n  fromInnerResponse\n};","map":{"version":3,"names":["Headers","HeadersList","fill","getHeadersGuard","setHeadersGuard","setHeadersList","require","extractBody","cloneBody","mixinBody","hasFinalizationRegistry","streamRegistry","bodyUnusable","util","nodeUtil","kEnumerableProperty","isValidReasonPhrase","isCancelled","isAborted","isBlobLike","serializeJavascriptValueToJSONString","isErrorLike","isomorphicEncode","environmentSettingsObject","relevantRealm","redirectStatusSet","nullBodyStatus","kState","kHeaders","webidl","FormData","URLSerializer","kConstruct","assert","types","textEncoder","TextEncoder","Response","error","responseObject","fromInnerResponse","makeNetworkError","json","data","init","argumentLengthCheck","arguments","converters","ResponseInit","bytes","encode","body","makeResponse","initializeResponse","type","redirect","url","status","USVString","parsedURL","URL","settingsObject","baseUrl","err","TypeError","cause","has","RangeError","value","headersList","append","constructor","BodyInit","bodyWithType","extractedBody","brandCheck","urlList","length","redirected","ok","statusText","headers","stream","bodyUsed","isDisturbed","clone","errors","exception","header","message","clonedResponse","cloneResponse","inspect","custom","depth","options","colors","properties","formatWithOptions","Object","defineProperties","prototype","Symbol","toStringTag","configurable","response","internalResponse","filterResponse","newResponse","aborted","rangeRequested","timingAllowPassed","requestIncludesCredentials","timingInfo","cacheState","reason","isError","Error","String","name","isNetworkError","makeFilteredResponse","state","Proxy","get","target","p","set","freeze","makeAppropriateNetworkError","fetchParams","assign","DOMException","includes","contains","innerResponse","guard","register","WeakRef","ReadableStream","interfaceConverter","URLSearchParams","XMLHttpRequestBodyInit","V","prefix","Blob","strict","ArrayBuffer","isView","isArrayBuffer","BufferSource","isFormDataLike","DOMString","argument","asyncIterator","dictionaryConverter","key","converter","defaultValue","ByteString","HeadersInit","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/web/fetch/response.js"],"sourcesContent":["'use strict'\n\nconst { Headers, HeadersList, fill, getHeadersGuard, setHeadersGuard, setHeadersList } = require('./headers')\nconst { extractBody, cloneBody, mixinBody, hasFinalizationRegistry, streamRegistry, bodyUnusable } = require('./body')\nconst util = require('../../core/util')\nconst nodeUtil = require('node:util')\nconst { kEnumerableProperty } = util\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode,\n  environmentSettingsObject: relevantRealm\n} = require('./util')\nconst {\n  redirectStatusSet,\n  nullBodyStatus\n} = require('./constants')\nconst { kState, kHeaders } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { FormData } = require('./formdata')\nconst { URLSerializer } = require('./data-url')\nconst { kConstruct } = require('../../core/symbols')\nconst assert = require('node:assert')\nconst { types } = require('node:util')\n\nconst textEncoder = new TextEncoder('utf-8')\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error () {\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this’s\n    // relevant Realm.\n    const responseObject = fromInnerResponse(makeNetworkError(), 'immutable')\n\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json (data, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, 'Response.json')\n\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init)\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(\n      serializeJavascriptValueToJSONString(data)\n    )\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes)\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this’s relevant Realm.\n    const responseObject = fromInnerResponse(makeResponse({}), 'response')\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })\n\n    // 5. Return responseObject.\n    return responseObject\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect (url, status = 302) {\n    webidl.argumentLengthCheck(arguments, 1, 'Response.redirect')\n\n    url = webidl.converters.USVString(url)\n    status = webidl.converters['unsigned short'](status)\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object’s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL\n    try {\n      parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl)\n    } catch (err) {\n      throw new TypeError(`Failed to parse URL from ${url}`, { cause: err })\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError(`Invalid status code ${status}`)\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this’s relevant Realm.\n    const responseObject = fromInnerResponse(makeResponse({}), 'immutable')\n\n    // 5. Set responseObject’s response’s status to status.\n    responseObject[kState].status = status\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL))\n\n    // 7. Append `Location`/value to responseObject’s response’s header list.\n    responseObject[kState].headersList.append('location', value, true)\n\n    // 8. Return responseObject.\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor (body = null, init = {}) {\n    if (body === kConstruct) {\n      return\n    }\n\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body)\n    }\n\n    init = webidl.converters.ResponseInit(init)\n\n    // 1. Set this’s response to a new response.\n    this[kState] = makeResponse({})\n\n    // 2. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is this’s response’s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct)\n    setHeadersGuard(this[kHeaders], 'response')\n    setHeadersList(this[kHeaders], this[kState].headersList)\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body)\n      bodyWithType = { body: extractedBody, type }\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType)\n  }\n\n  // Returns response’s type, e.g., \"cors\".\n  get type () {\n    webidl.brandCheck(this, Response)\n\n    // The type getter steps are to return this’s response’s type.\n    return this[kState].type\n  }\n\n  // Returns response’s URL, if it has one; otherwise the empty string.\n  get url () {\n    webidl.brandCheck(this, Response)\n\n    const urlList = this[kState].urlList\n\n    // The url getter steps are to return the empty string if this’s\n    // response’s URL is null; otherwise this’s response’s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null\n\n    if (url === null) {\n      return ''\n    }\n\n    return URLSerializer(url, true)\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected () {\n    webidl.brandCheck(this, Response)\n\n    // The redirected getter steps are to return true if this’s response’s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1\n  }\n\n  // Returns response’s status.\n  get status () {\n    webidl.brandCheck(this, Response)\n\n    // The status getter steps are to return this’s response’s status.\n    return this[kState].status\n  }\n\n  // Returns whether response’s status is an ok status.\n  get ok () {\n    webidl.brandCheck(this, Response)\n\n    // The ok getter steps are to return true if this’s response’s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299\n  }\n\n  // Returns response’s status message.\n  get statusText () {\n    webidl.brandCheck(this, Response)\n\n    // The statusText getter steps are to return this’s response’s status\n    // message.\n    return this[kState].statusText\n  }\n\n  // Returns response’s headers as Headers.\n  get headers () {\n    webidl.brandCheck(this, Response)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Response)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Response)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  // Returns a clone of response.\n  clone () {\n    webidl.brandCheck(this, Response)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (bodyUnusable(this)) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      })\n    }\n\n    // 2. Let clonedResponse be the result of cloning this’s response.\n    const clonedResponse = cloneResponse(this[kState])\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n    return fromInnerResponse(clonedResponse, getHeadersGuard(this[kHeaders]))\n  }\n\n  [nodeUtil.inspect.custom] (depth, options) {\n    if (options.depth === null) {\n      options.depth = 2\n    }\n\n    options.colors ??= true\n\n    const properties = {\n      status: this.status,\n      statusText: this.statusText,\n      headers: this.headers,\n      body: this.body,\n      bodyUsed: this.bodyUsed,\n      ok: this.ok,\n      redirected: this.redirected,\n      type: this.type,\n      url: this.url\n    }\n\n    return `Response ${nodeUtil.formatWithOptions(options, properties)}`\n  }\n}\n\nmixinBody(Response)\n\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n})\n\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse (response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response’s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(\n      cloneResponse(response.internalResponse),\n      response.type\n    )\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({ ...response, body: null })\n\n  // 3. If response’s body is non-null, then set newResponse’s body to the\n  // result of cloning response’s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(newResponse, response.body)\n  }\n\n  // 4. Return newResponse.\n  return newResponse\n}\n\nfunction makeResponse (init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init?.headersList\n      ? new HeadersList(init?.headersList)\n      : new HeadersList(),\n    urlList: init?.urlList ? [...init.urlList] : []\n  }\n}\n\nfunction makeNetworkError (reason) {\n  const isError = isErrorLike(reason)\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError\n      ? reason\n      : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  })\n}\n\n// @see https://fetch.spec.whatwg.org/#concept-network-error\nfunction isNetworkError (response) {\n  return (\n    // A network error is a response whose type is \"error\",\n    response.type === 'error' &&\n    // status is 0\n    response.status === 0\n  )\n}\n\nfunction makeFilteredResponse (response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  }\n\n  return new Proxy(response, {\n    get (target, p) {\n      return p in state ? state[p] : target[p]\n    },\n    set (target, p, value) {\n      assert(!(p in state))\n      target[p] = value\n      return true\n    }\n  })\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse (response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request’s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response’s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    })\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response’s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response’s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    })\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    })\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    })\n  } else {\n    assert(false)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError (fetchParams, err = null) {\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams))\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams)\n    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))\n    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse (response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.')\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText')\n    }\n  }\n\n  // 3. Set response’s response’s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status\n  }\n\n  // 4. Set response’s response’s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers)\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: `Invalid response status code ${response.status}`\n      })\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('content-type', true)) {\n      response[kState].headersList.append('content-type', body.type, true)\n    }\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#response-create\n * @param {any} innerResponse\n * @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard\n * @returns {Response}\n */\nfunction fromInnerResponse (innerResponse, guard) {\n  const response = new Response(kConstruct)\n  response[kState] = innerResponse\n  response[kHeaders] = new Headers(kConstruct)\n  setHeadersList(response[kHeaders], innerResponse.headersList)\n  setHeadersGuard(response[kHeaders], guard)\n\n  if (hasFinalizationRegistry && innerResponse.body?.stream) {\n    // If the target (response) is reclaimed, the cleanup callback may be called at some point with\n    // the held value provided for it (innerResponse.body.stream). The held value can be any value:\n    // a primitive or an object, even undefined. If the held value is an object, the registry keeps\n    // a strong reference to it (so it can pass it to the cleanup callback later). Reworded from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n    streamRegistry.register(response, new WeakRef(innerResponse.body.stream))\n  }\n\n  return response\n}\n\nwebidl.converters.ReadableStream = webidl.interfaceConverter(\n  ReadableStream\n)\n\nwebidl.converters.FormData = webidl.interfaceConverter(\n  FormData\n)\n\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(\n  URLSearchParams\n)\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V, prefix, name) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V, prefix, name)\n  }\n\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, prefix, name, { strict: false })\n  }\n\n  if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n    return webidl.converters.BufferSource(V, prefix, name)\n  }\n\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, prefix, name, { strict: false })\n  }\n\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V, prefix, name)\n  }\n\n  return webidl.converters.DOMString(V, prefix, name)\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V, prefix, argument) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V, prefix, argument)\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V\n  }\n\n  return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument)\n}\n\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n  {\n    key: 'status',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: () => 200\n  },\n  {\n    key: 'statusText',\n    converter: webidl.converters.ByteString,\n    defaultValue: () => ''\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  }\n])\n\nmodule.exports = {\n  isNetworkError,\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse,\n  fromInnerResponse\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}