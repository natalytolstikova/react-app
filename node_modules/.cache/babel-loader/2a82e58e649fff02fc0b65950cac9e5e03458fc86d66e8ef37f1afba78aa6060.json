{"ast":null,"code":"'use strict';\n\nconst {\n  getResponseData,\n  buildKey,\n  addMockDispatch\n} = require('./mock-utils');\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols');\nconst {\n  InvalidArgumentError\n} = require('../core/errors');\nconst {\n  buildURL\n} = require('../core/util');\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor(mockDispatch) {\n    this[kMockDispatch] = mockDispatch;\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay(waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0');\n    }\n    this[kMockDispatch].delay = waitInMs;\n    return this;\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist() {\n    this[kMockDispatch].persist = true;\n    return this;\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times(repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0');\n    }\n    this[kMockDispatch].times = repeatTimes;\n    return this;\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor(opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object');\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined');\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET';\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query);\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/web/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://');\n        opts.path = parsedURL.pathname + parsedURL.search;\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase();\n    }\n    this[kDispatchKey] = buildKey(opts);\n    this[kDispatches] = mockDispatches;\n    this[kDefaultHeaders] = {};\n    this[kDefaultTrailers] = {};\n    this[kContentLength] = false;\n  }\n  createMockScopeDispatchData({\n    statusCode,\n    data,\n    responseOptions\n  }) {\n    const responseData = getResponseData(data);\n    const contentLength = this[kContentLength] ? {\n      'content-length': responseData.length\n    } : {};\n    const headers = {\n      ...this[kDefaultHeaders],\n      ...contentLength,\n      ...responseOptions.headers\n    };\n    const trailers = {\n      ...this[kDefaultTrailers],\n      ...responseOptions.trailers\n    };\n    return {\n      statusCode,\n      data,\n      headers,\n      trailers\n    };\n  }\n  validateReplyParameters(replyParameters) {\n    if (typeof replyParameters.statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined');\n    }\n    if (typeof replyParameters.responseOptions !== 'object' || replyParameters.responseOptions === null) {\n      throw new InvalidArgumentError('responseOptions must be an object');\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply(replyOptionsCallbackOrStatusCode) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyOptionsCallbackOrStatusCode === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = opts => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyOptionsCallbackOrStatusCode(opts);\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object' || resolvedData === null) {\n          throw new InvalidArgumentError('reply options callback must return an object');\n        }\n        const replyParameters = {\n          data: '',\n          responseOptions: {},\n          ...resolvedData\n        };\n        this.validateReplyParameters(replyParameters);\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(replyParameters)\n        };\n      };\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);\n      return new MockScope(newMockDispatch);\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const replyParameters = {\n      statusCode: replyOptionsCallbackOrStatusCode,\n      data: arguments[1] === undefined ? '' : arguments[1],\n      responseOptions: arguments[2] === undefined ? {} : arguments[2]\n    };\n    this.validateReplyParameters(replyParameters);\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(replyParameters);\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);\n    return new MockScope(newMockDispatch);\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError(error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined');\n    }\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], {\n      error\n    });\n    return new MockScope(newMockDispatch);\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders(headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined');\n    }\n    this[kDefaultHeaders] = headers;\n    return this;\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers(trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined');\n    }\n    this[kDefaultTrailers] = trailers;\n    return this;\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength() {\n    this[kContentLength] = true;\n    return this;\n  }\n}\nmodule.exports.MockInterceptor = MockInterceptor;\nmodule.exports.MockScope = MockScope;","map":{"version":3,"names":["getResponseData","buildKey","addMockDispatch","require","kDispatches","kDispatchKey","kDefaultHeaders","kDefaultTrailers","kContentLength","kMockDispatch","InvalidArgumentError","buildURL","MockScope","constructor","mockDispatch","delay","waitInMs","Number","isInteger","persist","times","repeatTimes","MockInterceptor","opts","mockDispatches","path","method","query","parsedURL","URL","pathname","search","toUpperCase","createMockScopeDispatchData","statusCode","data","responseOptions","responseData","contentLength","length","headers","trailers","validateReplyParameters","replyParameters","reply","replyOptionsCallbackOrStatusCode","wrappedDefaultsCallback","resolvedData","newMockDispatch","arguments","undefined","dispatchData","replyWithError","error","defaultReplyHeaders","defaultReplyTrailers","replyContentLength","module","exports"],"sources":["/Users/nataliia/PussyProjects/react-app/node_modules/undici/lib/mock/mock-interceptor.js"],"sourcesContent":["'use strict'\n\nconst { getResponseData, buildKey, addMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols')\nconst { InvalidArgumentError } = require('../core/errors')\nconst { buildURL } = require('../core/util')\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor (mockDispatch) {\n    this[kMockDispatch] = mockDispatch\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay (waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].delay = waitInMs\n    return this\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist () {\n    this[kMockDispatch].persist = true\n    return this\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times (repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].times = repeatTimes\n    return this\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor (opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object')\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined')\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET'\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query)\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/web/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://')\n        opts.path = parsedURL.pathname + parsedURL.search\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase()\n    }\n\n    this[kDispatchKey] = buildKey(opts)\n    this[kDispatches] = mockDispatches\n    this[kDefaultHeaders] = {}\n    this[kDefaultTrailers] = {}\n    this[kContentLength] = false\n  }\n\n  createMockScopeDispatchData ({ statusCode, data, responseOptions }) {\n    const responseData = getResponseData(data)\n    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}\n    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }\n    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }\n\n    return { statusCode, data, headers, trailers }\n  }\n\n  validateReplyParameters (replyParameters) {\n    if (typeof replyParameters.statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined')\n    }\n    if (typeof replyParameters.responseOptions !== 'object' || replyParameters.responseOptions === null) {\n      throw new InvalidArgumentError('responseOptions must be an object')\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply (replyOptionsCallbackOrStatusCode) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyOptionsCallbackOrStatusCode === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = (opts) => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyOptionsCallbackOrStatusCode(opts)\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object' || resolvedData === null) {\n          throw new InvalidArgumentError('reply options callback must return an object')\n        }\n\n        const replyParameters = { data: '', responseOptions: {}, ...resolvedData }\n        this.validateReplyParameters(replyParameters)\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(replyParameters)\n        }\n      }\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)\n      return new MockScope(newMockDispatch)\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const replyParameters = {\n      statusCode: replyOptionsCallbackOrStatusCode,\n      data: arguments[1] === undefined ? '' : arguments[1],\n      responseOptions: arguments[2] === undefined ? {} : arguments[2]\n    }\n    this.validateReplyParameters(replyParameters)\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(replyParameters)\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError (error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined')\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders (headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined')\n    }\n\n    this[kDefaultHeaders] = headers\n    return this\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers (trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined')\n    }\n\n    this[kDefaultTrailers] = trailers\n    return this\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength () {\n    this[kContentLength] = true\n    return this\n  }\n}\n\nmodule.exports.MockInterceptor = MockInterceptor\nmodule.exports.MockScope = MockScope\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}